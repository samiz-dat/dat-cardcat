{"version":3,"sources":["../../src/utils/filesystem.js"],"names":["lsFilesPromised","fs","promisifyAll","dir","readdirPromised","statPromised","readdirAsync","statAsync","map","file","rFile","join","then","stat","isDirectory","results","flattenDeep","getDirectories","srcpath","filter","statSync","notADir","catch"],"mappings":";;;;;;;;;AASgBA,e,GAAAA,e,CAThB,wB,uCACA,4B,2CACA,oC,mDACA,gC,4IAEA,MAAMC,KAAK,mBAAQC,YAAR,cAAX,C,CAEA;AACA;AACO,SAASF,eAAT,CAAyBG,GAAzB,EAA8BC,eAA9B,EAA+CC,YAA/C,EAA6D,CAClE,MAAMC,eAAeF,mBAAmBH,GAAGK,YAA3C,CACA,MAAMC,YAAYF,gBAAgBJ,GAAGM,SAArC;AACA,SAAOD,aAAaH,GAAb;AACJK,KADI,CACCC,IAAD,IAAU;AACb,UAAMC,QAAQ,eAAKC,IAAL,CAAUR,GAAV,EAAeM,IAAf,CAAd;AACA,WAAOF,UAAUG,KAAV;AACJE,QADI,CACCC;AACJA,SAAKC,WAAL;AACEd,oBAAgBU,KAAhB,EAAuBJ,YAAvB,EAAqCC,SAArC,CADF;AAEEG,SAJC,CAAP;;AAMD,GATI;AAUJE,MAVI,CAUCG,WAAW,iBAAEC,WAAF,CAAcD,OAAd,CAVZ,CAAP;AAWD;;AAEM,MAAME,0CAAiBC,WAAWjB,GAAGK,YAAH,CAAgBY,OAAhB;AACtCC,MADsC,CAC/BV,QAAQR,GAAGmB,QAAH,CAAY,eAAKT,IAAL,CAAUO,OAAV,EAAmBT,IAAnB,CAAZ,EAAsCK,WAAtC,EADuB,CAAlC;;AAGP;AACA;AACO,MAAMO,4BAAUH;AACrBjB,GAAGM,SAAH,CAAaW,OAAb;AACGN,IADH,CACQC,QAAQ,CAACA,KAAKC,WAAL,EADjB;AAEGQ,KAFH,CAES,MAAM,IAFf,CADK","file":"filesystem.js","sourcesContent":["import fsOrig from 'fs';\nimport path from 'path';\nimport Promise from 'bluebird';\nimport _ from 'lodash';\n\nconst fs = Promise.promisifyAll(fsOrig);\n\n// Uses promises to recursively list a dat's contents using hyperdrive fs-ish functions\n// Note that the Promised hyperdrive functions are passed in by the caller.\nexport function lsFilesPromised(dir, readdirPromised, statPromised) {\n  const readdirAsync = readdirPromised || fs.readdirAsync;\n  const statAsync = statPromised || fs.statAsync;\n  return readdirAsync(dir)\n    .map((file) => {\n      const rFile = path.join(dir, file);\n      return statAsync(rFile)\n        .then(stat => (\n          stat.isDirectory()\n          ? lsFilesPromised(rFile, readdirAsync, statAsync)\n          : rFile\n        ));\n    })\n    .then(results => _.flattenDeep(results));\n}\n\nexport const getDirectories = srcpath => fs.readdirAsync(srcpath)\n  .filter(file => fs.statSync(path.join(srcpath, file)).isDirectory());\n\n// This is unusual, but I found that I cannot simply say !dirExists if dirExists returns a Promise.\n// The promise always exists\nexport const notADir = srcpath =>\n  fs.statAsync(srcpath)\n    .then(stat => !stat.isDirectory())\n    .catch(() => true);\n"]}