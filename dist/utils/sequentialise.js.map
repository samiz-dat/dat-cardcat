{"version":3,"sources":["../../src/utils/sequentialise.js"],"names":["sequentialise","obj","opts","P","promise","Promise","ignore","Array","isArray","queue","handler","get","target","propKey","receiver","origMethod","includes","args","queueOptions","length","pop","undefined","add","bind","Proxy"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBwBA,a,CArBxB,8C,yJAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEe,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC,CAC/C,MAAMC,IAAKD,QAAQA,KAAKE,OAAd,GAAyBF,KAAKE,OAA9B,GAAwCC,OAAlD,CACA,MAAMC,SAAUJ,QAAQK,MAAMC,OAAN,CAAcN,KAAKI,MAAnB,CAAT,GAAuCJ,KAAKI,MAA5C,GAAqD,EAApE,CAEA,MAAMG,QAAQ,2BAAiB,IAAjB,EAAuBN,CAAvB,CAAd,CAEA,MAAMO,UAAU,EACdC,IAAIC,MAAJ,EAAYC,OAAZ,EAAqBC,QAArB,EAA+B,CAC7B,MAAMC,aAAaH,OAAOC,OAAP,CAAnB,CACA,IAAI,OAAOE,UAAP,KAAsB,UAAtB,IAAqCT,OAAOU,QAAP,CAAgBH,OAAhB,CAAzC,EAAoE,OAAOE,UAAP,CACpE,OAAO,CAAC,GAAGE,IAAJ,KAAa,CAClB,MAAMC,eAAgBD,KAAKE,MAAL,GAAcJ,WAAWI,MAA1B,GAAoCF,KAAKG,GAAL,EAApC,GAAiDC,SAAtE,CACA,OAAOZ,MAAMa,GAAN,CAAUP,WAAWQ,IAAX,CAAgBT,QAAhB,EAA0B,GAAGG,IAA7B,CAAV,EAA8CC,YAA9C,CAAP,CACD,CAHD,CAID,CARa,EAAhB,CAUA,OAAO,IAAIM,KAAJ,CAAUvB,GAAV,EAAeS,OAAf,CAAP,CACD","file":"sequentialise.js","sourcesContent":["import PromiseQueue from './PromiseQueue';\n\n// export class Sequentialise {\n//   constructor(object) {\n//     this.queue = new PromiseQueue();\n//     for (const key of object) {\n//       const fn = object[key];\n//       if (typeof fn === 'function' && Object.prototype.hasOwnProperty.call(object, key)) {\n//         this[key] = (...args) => {\n//           const opts = (args.length > fn.length) ? args.pop() : undefined;\n//           return this.execute(fn.bind(object, ...args), opts);\n//         };\n//       }\n//     }\n//   }\n\n//   execute(queryFn, opts) {\n//     return new Promise(resolve => this.queue.add(queryFn, resolve, opts));\n//   }\n// }\n\nexport default function sequentialise(obj, opts) {\n  const P = (opts && opts.promise) ? opts.promise : Promise;\n  const ignore = (opts && Array.isArray(opts.ignore)) ? opts.ignore : [];\n\n  const queue = new PromiseQueue(null, P);\n\n  const handler = {\n    get(target, propKey, receiver) {\n      const origMethod = target[propKey];\n      if (typeof origMethod !== 'function' || (ignore.includes(propKey))) return origMethod;\n      return (...args) => {\n        const queueOptions = (args.length > origMethod.length) ? args.pop() : undefined;\n        return queue.add(origMethod.bind(receiver, ...args), queueOptions);\n      };\n    },\n  };\n  return new Proxy(obj, handler);\n}\n"]}