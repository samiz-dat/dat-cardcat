{"version":3,"sources":["../../src/utils/importers.js"],"names":["entry","format","type","arr","name","split","sep","shift","parsers","ignore","calibre","pathArr","length","includes","author","authorSort","last","first","title","file"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Be,UAAUA,KAAV,EAAiBC,SAAS,SAA1B,EAAqC;AAClD;AACA,MAAID,MAAME,IAAN,KAAe,MAAnB,EAA2B;AACzB,UAAMC,MAAMH,MAAMI,IAAN,CAAWC,KAAX,CAAiB,eAAKC,GAAtB,CAAZ;AACA;AACA,QAAIH,IAAI,CAAJ,MAAW,EAAf,EAAmB;AACjBA,UAAII,KAAJ;AACD;AACD;AACA,WAAOC,QAAQP,MAAR,EAAgBE,GAAhB,CAAP;AACD;AACD,SAAO,KAAP;AACD,C,CA1CD,4B,2CACA,wD,mKAEA;;;;wSAMA;AACA,MAAMM,SAAS,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,CAAf,CAEA,MAAMD,UAAU,EACd;AACAE,WAAUC,OAAD,IAAa,CACpB,IAAIA,QAAQC,MAAR,KAAmB,CAAnB,IAAwB,CAACH,OAAOI,QAAP,CAAgBF,QAAQ,CAAR,CAAhB,CAA7B,EAA0D,CACxD,MAAMP,OAAO,iCAAOO,QAAQ,CAAR,CAAP,CAAb,CACA,OAAO,EACLG,QAAQH,QAAQ,CAAR,CADH,EAELI,YAAa,GAAEX,KAAKY,IAAK,KAAIZ,KAAKa,KAAM,EAFnC,EAGLC,OAAOP,QAAQ,CAAR,CAHF,EAILQ,MAAMR,QAAQ,CAAR,CAJD,EAAP,CAMD,CACD,OAAO,KAAP,CACD,CAba,EAAhB,C,CAgBA;AACA","file":"importers.js","sourcesContent":["import path from 'path';\nimport parser from 'another-name-parser';\n\n/*\nWhen importing files from a dat, there is likely to be extra data or things\nthat just aren't in the right format. We'll define acceptable formats here\n(and for now that is just a Calibre library format)\n */\n\n// Files to ignore, even if they are in the right place\nconst ignore = ['.DS_Store', '.dat', '.git'];\n\nconst parsers = {\n  // Calibre parser is the default one\n  calibre: (pathArr) => {\n    if (pathArr.length === 3 && !ignore.includes(pathArr[2])) {\n      const name = parser(pathArr[0]);\n      return {\n        author: pathArr[0],\n        authorSort: `${name.last}, ${name.first}`,\n        title: pathArr[1],\n        file: pathArr[2],\n      };\n    }\n    return false;\n  },\n};\n\n// Does the given candidate pass the formatting tests? (should it be added?)\n// If so, return { author, author_sort, title, file }\nexport default function (entry, format = 'calibre') {\n  // Only files (not directories) are eligible\n  if (entry.type === 'file') {\n    const arr = entry.name.split(path.sep);\n    // Sometimes there is a leading slash which messes things up\n    if (arr[0] === '') {\n      arr.shift();\n    }\n    // Call the appropriate parser for the given format\n    return parsers[format](arr);\n  }\n  return false;\n}\n"]}