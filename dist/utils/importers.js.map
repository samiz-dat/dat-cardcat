{"version":3,"sources":["../../src/utils/importers.js"],"names":["file","format","arr","split","sep","shift","parsers","ignore","calibre","pathArr","length","includes","name","author","authorSort","last","first","title","authorTitle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCe,UAAUA,IAAV,EAAgBC,SAAS,SAAzB,EAAoC;AACjD;AACA,QAAMC,MAAMF,KAAKG,KAAL,CAAW,eAAKC,GAAhB,CAAZ;AACA;AACA,MAAIF,IAAI,CAAJ,MAAW,EAAf,EAAmB;AACjBA,QAAIG,KAAJ;AACD;AACD;AACA,SAAOC,QAAQL,MAAR,EAAgBC,GAAhB,CAAP;AACD,C,CAhDD,4B,2CACA,wD,mKAEA;;;;wSAMA;AACA,MAAMK,SAAS,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,CAAf,CAEA,MAAMD,UAAU,EACd;AACAE,WAAUC,OAAD,IAAa,CACpB,IAAIA,QAAQC,MAAR,KAAmB,CAAnB,IAAwB,CAACH,OAAOI,QAAP,CAAgBF,QAAQ,CAAR,CAAhB,CAA7B,EAA0D,CACxD,MAAMG,OAAO,iCAAOH,QAAQ,CAAR,CAAP,CAAb,CACA,OAAO,EACLI,QAAQJ,QAAQ,CAAR,CADH,EAELK,YAAa,GAAEF,KAAKG,IAAK,KAAIH,KAAKI,KAAM,EAFnC,EAGLC,OAAOR,QAAQ,CAAR,CAHF,EAILT,MAAMS,QAAQ,CAAR,CAJD,EAAP,CAMD,CACD,OAAO,KAAP,CACD,CAba,EAcdS,aAAcT,OAAD,IAAa,CACxB,IAAIA,QAAQC,MAAR,GAAiB,CAArB,EAAwB,CACtB,OAAO,EACLG,QAAQJ,QAAQ,CAAR,CADH,EAELQ,OAAQR,QAAQC,MAAR,GAAiB,CAAlB,GAAuBD,QAAQ,CAAR,CAAvB,GAAoC,EAFtC,EAAP,CAID,CACD,OAAO,KAAP,CACD,CAtBa,EAAhB,C,CAyBA;AACA","file":"importers.js","sourcesContent":["import path from 'path';\nimport parser from 'another-name-parser';\n\n/*\nWhen importing files from a dat, there is likely to be extra data or things\nthat just aren't in the right format. We'll define acceptable formats here\n(and for now that is just a Calibre library format)\n */\n\n// Files to ignore, even if they are in the right place\nconst ignore = ['.DS_Store', '.dat', '.git'];\n\nconst parsers = {\n  // Calibre parser is the default one\n  calibre: (pathArr) => {\n    if (pathArr.length === 3 && !ignore.includes(pathArr[2])) {\n      const name = parser(pathArr[0]);\n      return {\n        author: pathArr[0],\n        authorSort: `${name.last}, ${name.first}`,\n        title: pathArr[1],\n        file: pathArr[2],\n      };\n    }\n    return false;\n  },\n  authorTitle: (pathArr) => {\n    if (pathArr.length > 0) {\n      return {\n        author: pathArr[0],\n        title: (pathArr.length > 1) ? pathArr[1] : '',\n      };\n    }\n    return false;\n  },\n};\n\n// Does the given candidate pass the formatting tests? (should it be added?)\n// If so, return { author, author_sort, title, file }\nexport default function (file, format = 'calibre') {\n  // Only files (not directories) are eligible\n  const arr = file.split(path.sep);\n  // Sometimes there is a leading slash which messes things up\n  if (arr[0] === '') {\n    arr.shift();\n  }\n  // Call the appropriate parser for the given format\n  return parsers[format](arr);\n}\n"]}