{"version":3,"sources":["../src/dat.js"],"names":["DatWrapper","constructor","opts","exitHandler","options","error","cleanup","console","log","dat","leave","importer","destroy","stack","exit","process","directory","existsSync","mkdirSync","key","name","stats","latest","indexing","run","create","then","toString","network","joinNetwork","trackStats","importFiles","once","gray","bold","peers","archive","metadata","on","emit","createDatAsync","promisify","importPath","resolve","reject","writable","watch","dereference","src","replace","stat","importFromDat","srcDatWrapper","fileOrDir","overwriteExisting","dstPath","join","exportArchiveToFilesystem","srcArchive","srcPath","listContents","below","readdir","recursive","downloadContent","fn","fn2","download","hasFile","file","statAsync","catch","e","rename","dir","renameAsync","writeManifest","defaultOptions","url","title","manifest","Object","assign","updateManifest"],"mappings":"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","file":"dat.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport EventEmitter from 'events';\nimport createDat from 'dat-node';\n// import _ from 'lodash';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport pda from 'pauls-dat-api';\n\n// import { lsFilesPromised } from './utils/filesystem';\n\n// fork() - download a dat and fork it (thru dat.json)\n// list() - lists files\n// download() - downloads some files\n// read/writeManifest()\n// health/ stats\n\n/**\n * Adds Library-ish functions to a Dat. Expects the Dat's directory structure to\n * follow Calibre's (Author Name/ Publication Title/ Files)\n */\nexport default class DatWrapper extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.directory = opts.directory;\n    // create if it doesn't exist\n    if (!fs.existsSync(opts.directory)) {\n      fs.mkdirSync(opts.directory);\n    }\n    this.key = opts.key;\n    this.name = opts.name;\n    this.stats = false;\n    this.opts = opts;\n    // Don't need the whole history (also we do need files as files)\n    this.opts.latest = true;\n    // If we're creating/ hosting a dat, set indexing to true\n    // this.opts.indexing = !this.key;\n    this.opts.indexing = true;\n    this.importer = false;\n  }\n\n  // Creates a dat and grabs a key\n  // Perhaps this gets rewritten to be more like beaker:\n  // https://github.com/beakerbrowser/beaker/blob/2c2336430bdb00ea8e47e13fb2e8c8d5b89440ea/app/background-process/networks/dat/dat.js#L231\n  run() {\n    return this.create()\n      .then((dat) => {\n        this.dat = dat;\n        this.key = dat.key.toString('hex');\n        // const opts = {}; // various network options could go here (https://github.com/datproject/dat-node)\n        const network = dat.joinNetwork();\n        this.stats = dat.trackStats();\n\n        this.importFiles();\n        /*\n        stats.once('update', () => {\n          console.log(chalk.gray(chalk.bold('stats updated')), stats.get());\n        });\n        */\n        network.once('connection', () => {\n          console.log('connects via network');\n          console.log(chalk.gray(chalk.bold('peers:')), this.stats.peers);\n        });\n        // this.start(dat);\n        // Watch for metadata syncing\n        dat.archive.metadata.on('sync', () => {\n          console.log('metadata synced');\n          this.emit('sync metadata', this);\n        });\n      })\n      // .then(() => this.importFiles())\n      .then(() => this);\n  }\n\n  // Just creates a dat object\n  create() {\n    const createDatAsync = Promise.promisify(createDat);\n    return createDatAsync(this.directory, this.opts);\n  }\n\n  // How many peers for this dat\n  get peers() {\n    return this.stats.peers || 0;\n  }\n\n  importFiles(importPath = this.directory) {\n    return new Promise((resolve, reject) => {\n      const dat = this.dat;\n      if (this.dat.writable) {\n        console.log('Importing files under:', importPath);\n        const opts = {\n          watch: true,\n          dereference: true,\n          indexing: true,\n        };\n        this.importer = dat.importFiles(importPath, opts, () => {\n          console.log(`Finished importing files in ${importPath}`);\n          resolve(true);\n        });\n        this.importer.on('error', reject);\n        // Emit event that something has been imported into the dat\n        this.importer.on('put', src => this.emit('import', this, src.name.replace(this.directory, ''), src.stat));\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // Import a file o directory from another archive\n  async importFromDat(srcDatWrapper, fileOrDir, overwriteExisting = true) {\n    if (this.dat.writable) {\n      const dstPath = path.join(this.directory, fileOrDir);\n      return pda.exportArchiveToFilesystem({\n        srcArchive: srcDatWrapper.dat.archive,\n        dstPath,\n        srcPath: fileOrDir,\n        overwriteExisting,\n      });\n      // .then(() => this.importFiles());\n    }\n    // Fallback\n    return Promise.resolve(false);\n  }\n\n  // Lists the contents of the dat\n  listContents(below = '/') {\n    return pda.readdir(this.dat.archive, below, { recursive: true });\n  }\n\n  // Download a file or directory\n  downloadContent(fn = '') {\n    const fn2 = `/${fn}/`;\n    console.log(`Downloading: ${fn2}`);\n    console.log(this.stats.peers);\n    return pda.download(this.dat.archive, fn2);\n  }\n\n  // Has the file been downloaded?\n  hasFile(file) {\n    return fs.statAsync(path.join(this.directory, file))\n      .catch(e => {});\n  }\n\n  // Rename\n  rename(dir, name) {\n    const renameAsync = Promise.promisify(fs.rename);\n    return renameAsync(this.directory, dir)\n      .then(() => {\n        this.directory = dir;\n        this.name = name;\n      });\n  }\n\n  // Write a manifest file\n  // @todo: fix me! why do i write empty manifests?\n  async writeManifest(opts = {}) {\n    const defaultOptions = {\n      url: `dat://${this.key}`,\n      title: this.name,\n    };\n    const manifest = Object.assign(defaultOptions, opts);\n    await pda.writeManifest(this.dat.archive, manifest);\n    return this;\n  }\n\n  // Update a manifest file\n  updateManifest(manifest) {\n    return pda.updateManifest(this.dat.archive, manifest);\n  }\n\n\n  exitHandler = options => (error) => {\n    if (options.cleanup) {\n      console.log('cleaning up!');\n      if (this.dat) this.dat.leave();\n      if (this.importer) this.importer.destroy();\n    }\n    if (error) console.log(error.stack);\n    if (options.exit) process.exit();\n  };\n\n}\n"]}