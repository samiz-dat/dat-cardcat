{"version":3,"sources":["../src/dat.js"],"names":["DatWrapper","constructor","opts","exitHandler","options","error","cleanup","console","log","dat","leave","stack","exit","process","directory","existsSync","mkdirSync","key","name","latest","run","create","then","toString","network","joinNetwork","stats","trackStats","once","gray","bold","peers","archive","metadata","on","emit","createDatAsync","promisify","importFiles","resolve","reject","writable","watch","dereference","importer","src","stat","refreshMetadata","length","updateAsync","update","context","listContents","below","readdir","recursive","downloadContent","fn","fn2","download"],"mappings":"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","file":"dat.js","sourcesContent":["import fs from 'fs';\nimport EventEmitter from 'events';\nimport createDat from 'dat-node';\n// import _ from 'lodash';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport pda from 'pauls-dat-api';\n\nimport { lsFilesPromised } from './utils/filesystem';\n\n// fork() - download a dat and fork it (thru dat.json)\n// list() - lists files\n// download() - downloads some files\n// read/writeManifest()\n// health/ stats\n\n/**\n * Adds Library-ish functions to a Dat. Expects the Dat's directory structure to\n * follow Calibre's (Author Name/ Publication Title/ Files)\n */\nexport default class DatWrapper extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.directory = opts.directory;\n    // create if it doesn't exist\n    if (!fs.existsSync(opts.directory)) {\n      fs.mkdirSync(opts.directory);\n    }\n    this.key = opts.key;\n    this.name = opts.name;\n    this.opts = opts;\n    // Don't need the whole history (also we do need files as files)\n    this.opts.latest = true;\n    // If we're creating/ hosting a dat, set indexing to true\n    // this.opts.indexing = !this.key;\n  }\n\n  // Creates a dat and grabs a key\n  // Perhaps this gets rewritten to be more like beaker:\n  // https://github.com/beakerbrowser/beaker/blob/2c2336430bdb00ea8e47e13fb2e8c8d5b89440ea/app/background-process/networks/dat/dat.js#L231\n  run() {\n    return this.create()\n      .then((dat) => {\n        this.dat = dat;\n        this.key = dat.key.toString('hex');\n        // const opts = {}; // various network options could go here (https://github.com/datproject/dat-node)\n        const network = dat.joinNetwork();\n        const stats = dat.trackStats();\n        /*\n        stats.once('update', () => {\n          console.log(chalk.gray(chalk.bold('stats updated')), stats.get());\n        });\n        */\n        network.once('connection', () => {\n          console.log('connects via network');\n          console.log(chalk.gray(chalk.bold('peers:')), stats.peers);\n        });\n        // this.start(dat);\n        // Watch for metadata syncing\n        dat.archive.metadata.on('sync', () => {\n          this.emit('sync metadata', this);\n        });\n      })\n      .then(() => this);\n  }\n\n  // Just creates a dat object\n  create() {\n    const createDatAsync = Promise.promisify(createDat);\n    return createDatAsync(this.directory, this.opts);\n  }\n\n  importFiles() {\n    return new Promise((resolve, reject) => {\n      const dat = this.dat;\n      if (this.dat.writable) {\n        const opts = {\n          watch: true,\n          dereference: true,\n        };\n        const importer = dat.importFiles(this.directory, opts, () => {\n          console.log(`Finished importing files in ${this.directory}`);\n          resolve(true);\n        });\n        importer.on('error', reject);\n        // Emit event that something has been imported into the dat\n        importer.on('put', src =>\n          this.emit('import', this, src.name, src.stat));\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  refreshMetadata() {\n    const metadata = this.dat.archive.metadata;\n    console.log('Refreshing metadata. Length:', metadata.length);\n    const updateAsync = Promise.promisify(metadata.update, { context: metadata });\n    return updateAsync();\n  }\n\n  // Lists the contents of the dat\n  listContents(below = '/') {\n    return pda.readdir(this.dat.archive, below, { recursive: true });\n  }\n\n  // Download a file or directory\n  async downloadContent(fn = '') {\n    const fn2 = `/${fn}/`;\n    console.log(`Downloading: ${fn2}`);\n    return pda.download(this.dat.archive, fn2);\n  }\n\n  exitHandler = options => (error) => {\n    if (options.cleanup) {\n      console.log('cleaning up!');\n      if (this.dat) this.dat.leave();\n    }\n    if (error) console.log(error.stack);\n    if (options.exit) process.exit();\n  };\n\n}\n"]}