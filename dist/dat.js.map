{"version":3,"sources":["../src/dat.js"],"names":["lsDat","readdirAsync","statAsync","dir","map","file","rFile","join","then","stat","isDirectory","DatWrapper","constructor","opts","exitHandler","options","error","cleanup","console","log","dat","leave","stack","exit","process","directory","existsSync","mkdirSync","key","name","run","create","toString","network","joinNetwork","stats","trackStats","once","gray","bold","peers","createDatAsync","promisify","importFiles","resolve","reject","writable","importer","on","src","emit","listContents","archive","readdir","context","results","downloadContent","fn","download"],"mappings":"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","file":"dat.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport EventEmitter from 'events';\nimport createDat from 'dat-node';\n// import _ from 'lodash';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport pda from 'pauls-dat-api';\nimport { flatten } from './utils/data';\n\n// Uses promises to recursively list a dat's contents using hyperdrive fs-ish functions\n// Note that the Promised hyperdrive functions are passed in by the caller.\nfunction lsDat(readdirAsync, statAsync, dir) {\n  return readdirAsync(dir).map((file) => {\n    const rFile = path.join(dir, file);\n    return statAsync(rFile).then((stat) => {\n      if (stat.isDirectory()) {\n        return lsDat(readdirAsync, statAsync, rFile);\n      }\n      return rFile;\n    });\n  });\n}\n\n/**\n * Adds Library-ish functions to a Dat. Expects the Dat's directory structure to\n * follow Calibre's (Author Name/ Publication Title/ Files)\n */\nexport default class DatWrapper extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.directory = opts.directory;\n    // create if it doesn't exist\n    if (!fs.existsSync(opts.directory)) {\n      fs.mkdirSync(opts.directory);\n    }\n    this.key = opts.key;\n    this.name = opts.name;\n    this.opts = opts;\n  }\n\n  // Creates a dat and grabs a key\n  // Perhaps this gets rewritten to be more like beaker:\n  // https://github.com/beakerbrowser/beaker/blob/2c2336430bdb00ea8e47e13fb2e8c8d5b89440ea/app/background-process/networks/dat/dat.js#L231\n  run() {\n    return this.create()\n      .then((dat) => {\n        this.dat = dat;\n        this.key = dat.key.toString('hex');\n        // const opts = {}; // various network options could go here (https://github.com/datproject/dat-node)\n        const network = dat.joinNetwork();\n        const stats = dat.trackStats();\n        /*\n        stats.once('update', () => {\n          console.log(chalk.gray(chalk.bold('stats updated')), stats.get());\n        });\n        */\n        network.once('connection', () => {\n          console.log('connects via network');\n          console.log(chalk.gray(chalk.bold('peers:')), stats.peers);\n        });\n        // this.start(dat);\n      })\n      .then(() => this);\n  }\n\n  // Just creates a dat object\n  create() {\n    const createDatAsync = Promise.promisify(createDat);\n    return createDatAsync(this.directory, this.opts);\n  }\n\n  importFiles() {\n    return new Promise((resolve, reject) => {\n      const dat = this.dat;\n      if (this.dat.writable) {\n        const importer = dat.importFiles({}, () => {\n          console.log(`Finished importing files in ${this.directory}`);\n          resolve(true);\n        });\n        importer.on('error', reject);\n        // Emit event that something has been imported into the dat\n        importer.on('put', src =>\n          this.emit('import', this, src.name, src.stat));\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // Lists the contents of the dat\n  listContents() {\n    const archive = this.dat.archive;\n    const readdirAsync = Promise.promisify(archive.readdir, { context: archive });\n    const statAsync = Promise.promisify(archive.stat, { context: archive });\n    return lsDat(readdirAsync, statAsync, '/')\n      .then(results => flatten(results));\n  }\n\n  // Download a file or directory\n  async downloadContent(fn = '') {\n    console.log(`Downloading: /${fn}`);\n    await pda.download(this.dat.archive, fn);\n  }\n\n  exitHandler = options => (error) => {\n    if (options.cleanup) {\n      console.log('cleaning up!');\n      if (this.dat) this.dat.leave();\n    }\n    if (error) console.log(error.stack);\n    if (options.exit) process.exit();\n  };\n\n}\n"]}