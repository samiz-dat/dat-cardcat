{"version":3,"sources":["../src/dat.js"],"names":["listDatContents","listDatContents2","importFiles","dat","archive","archiveList","promisify","list","context","listFiles","dw","owner","resolve","DatWrapper","constructor","opts","exitHandler","options","error","cleanup","console","log","leave","stack","exit","process","directory","existsSync","mkdirSync","key","name","run","create","then","toString","network","joinNetwork","stats","trackStats","once","gray","bold","get","peers","createDatAsync","importer","on","err","listContents","downloadContent","fn","download"],"mappings":"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","file":"dat.js","sourcesContent":["import fs from 'fs';\nimport createDat from 'dat-node';\n// import _ from 'lodash';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport pda from 'pauls-dat-api';\n\n// Lists the contents of a dat\nexport function listDatContents(dat) {\n  const archive = dat.archive;\n  const archiveList = Promise.promisify(archive.list, { context: archive });\n  return archiveList();\n}\n\nexport function listDatContents2(dat) {\n  return pda.listFiles(dat.archive, '/');\n}\n\nexport function importFiles(dw) {\n  if (dw.dat.owner) {\n    return dw.importFiles();\n  }\n  return Promise.resolve(true);\n}\n\n/**\n * Adds Library-ish functions to a Dat. Expects the Dat's directory structure to\n * follow Calibre's (Author Name/ Publication Title/ Files)\n */\nexport default class DatWrapper {\n  constructor(opts) {\n    this.directory = opts.directory;\n    // create if it doesn't exist\n    if (!fs.existsSync(opts.directory)) {\n      fs.mkdirSync(opts.directory);\n    }\n    this.key = opts.key;\n    this.name = opts.name;\n    this.opts = opts;\n  }\n\n  // Creates a dat and grabs a key\n  // Perhaps this gets rewritten to be more like beaker:\n  // https://github.com/beakerbrowser/beaker/blob/2c2336430bdb00ea8e47e13fb2e8c8d5b89440ea/app/background-process/networks/dat/dat.js#L231\n  run() {\n    return this.create()\n      .then((dat) => {\n        this.dat = dat;\n        this.key = dat.key.toString('hex');\n        // const opts = {}; // various network options could go here (https://github.com/datproject/dat-node)\n        const network = dat.joinNetwork();\n        const stats = dat.trackStats();\n        stats.once('update', () => {\n          console.log(chalk.gray(chalk.bold('stats updated')), stats.get());\n        });\n        network.once('connection', () => {\n          console.log('connects via network');\n          console.log(chalk.gray(chalk.bold('peers:')), stats.peers);\n        });\n        // this.start(dat);\n      })\n      .then(() => this);\n  }\n\n  // Just creates a dat object\n  create() {\n    const createDatAsync = Promise.promisify(createDat);\n    return createDatAsync(this.directory, this.opts);\n  }\n\n  importFiles() {\n    const dat = this.dat;\n    if (this.dat.owner) {\n      const importer = dat.importFiles(this.directory, () => console.log(`Finished importing files in ${this.directory}`));\n      importer.on('error', err => console.log(err));\n    }\n    return Promise.resolve(false);\n  }\n\n  // Lists the contents of a dat\n  listContents() {\n    const archive = this.dat.archive;\n    const archiveList = Promise.promisify(archive.list, { context: archive });\n    return archiveList();\n  }\n\n  // Download a file or directory\n  async downloadContent(fn = '') {\n    console.log(`Downloading: /${fn}`);\n    await pda.download(this.dat.archive, fn);\n  }\n\n  exitHandler = options => (error) => {\n    if (options.cleanup) {\n      console.log('cleaning up!');\n      if (this.dat) this.dat.leave();\n    }\n    if (error) console.log(error.stack);\n    if (options.exit) process.exit();\n  };\n\n}\n"]}