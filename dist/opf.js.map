{"version":3,"sources":["../src/opf.js"],"names":["opf2js","js2opf","promisifyAll","OPF","constructor","parsedXmlData","data","obj","package","metadata","title","getField","s","authors","getList","description","undefined","name","id","Array","isArray","map","c","idx","length","identifiers","ids","Symbol","iterator","i","$","_","fileLoc","encoding","readFileAsync","then","parseStringAsync","catch","err","console","log"],"mappings":"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","file":"opf.js","sourcesContent":["/*\n * OPF metadata handling\n * Ability to do basic reading and writing of Calibre's opf (xml) metadata format\n */\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport xml2js from 'xml2js';\n\nPromise.promisifyAll(fs);\nPromise.promisifyAll(xml2js);\n\n// Extracted Opf metadata gets packaged into an OPF\nclass OPF {\n  constructor(parsedXmlData) {\n    this.data = parsedXmlData;\n    this.obj = parsedXmlData.package.metadata[0];\n  }\n\n  get title() {\n    return this.getField('dc:title');\n  }\n\n  set title(s) {\n    this.obj['dc:title'] = s;\n  }\n\n  get authors() {\n    return this.getList('dc:creator');\n  }\n\n  get description() {\n    return this.getField('dc:description');\n  }\n\n  // This is just for testing\n  get undefined() {\n    return this.getField('dc:undefined_field');\n  }\n\n  getList(name, id = '_') {\n    if (name in this.obj) {\n      if (Array.isArray(this.obj[name])) {\n        return this.obj[name].map(c => c[id]);\n      }\n    }\n    return undefined;\n  }\n\n  getField(name, idx = 0) {\n    if (name in this.obj) {\n      if (Array.isArray(this.obj[name]) && this.obj[name].length > idx) {\n        return this.obj[name][idx];\n      }\n    }\n    return undefined;\n  }\n\n  get identifiers() {\n    const ids = {};\n    const obj = this.obj;\n    ids[Symbol.iterator] = function* () {\n      if (Array.isArray(obj['dc:identifier'])) {\n        for (const i of obj['dc:identifier']) {\n          if ('$' in i && '_' in i && 'opf:scheme' in i.$) {\n            const id = {};\n            id[i.$['opf:scheme']] = i._;\n            yield id;\n          }\n        }\n      }\n    };\n    return ids;\n  }\n}\n\n// Parses an opf file\nexport function opf2js(fileLoc, encoding = 'utf-8') {\n  return fs.readFileAsync(fileLoc, encoding)\n    .then(data => xml2js.parseStringAsync(data))\n    .then(data => new OPF(data))\n    .catch((err) => { console.log(err); });\n}\n\n// Writes an opf file from an OPF object\nexport function js2opf(fileLoc, obj) {\n  console.log(`Writing OPFs is not implemented yet: ${obj}`);\n}\n"]}