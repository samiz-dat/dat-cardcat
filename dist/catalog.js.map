{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","pathIsDownloaded","dat","filePath","existsSync","join","directory","getDats","db","select","getDat","key","where","dats","client","connection","filename","format","dir","base","useNullAsDefault","isReady","initDatabase","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","table","string","boolean","then","catch","e","console","error","cleanupDatsRegistry","log","map","filter","each","bold","removeDatFromDb","clearDatEntries","discoverDats","name","opts","createIfMissing","sparse","importDat","importDatsFromDB","startsWith","keys","importDir","split","sep","slice","importRemoteDat","resolve","newDat","run","registerDat","importFiles","entry","importDatEntry","err","dw","datkey","toString","addDatToDb","finally","insert","into","datKey","del","arr","shift","length","downloaded","downloadedStr","title_hash","file_hash","author","author_sort","last","first","title","file","pathToDat","from","checkout","download","scanForDownloads","getDatsWith","row","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","downloadContent","dbRow","update","search","query","s","exp","orWhere","Array","isArray","whereIn","orderBy","getAuthors","startingWith","countDistinct","groupBy","getAuthorLetters","column","raw","distinct","getTitlesForAuthor","getFiles","getOpf","mfn","fp","dataDir","dataDirFinal","process","cwd","get","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport db from 'knex';\nimport parser from 'another-name-parser';\nimport chalk from 'chalk';\nimport config from './config';\n\nimport DatWrapper, { listDatContents } from './dat'; //this function can be made a method of dat class too.\nimport { opf2js } from './opf';\nimport { getDirectories, notADir } from './utils/filesystem';\n// @todo: this.db.close(); should be called on shutdown\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename: path.format({\n          dir: this.baseDir,\n          base: 'catalog.db',\n        }),\n      },\n      useNullAsDefault: true,\n    });\n    this.isReady = false;\n  }\n\n  initDatabase() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('dats')\n      .dropTableIfExists('texts')\n      .dropTableIfExists('more_authors');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n\n  // Every imported and added dat gets added to the `dats` table of the database. If\n  // the directories are deleted then these db entries are useless and should be removed.\n  // This will simply confirm that every dat directory in the db still exists.\n  cleanupDatsRegistry() {\n    console.log('Cleaning up the dats registry');\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} (directory does not exist)`);\n        return this.removeDatFromDb(dat.dat)\n          .then(() => this.clearDatEntries(dat.dat));\n      })\n      .then(() => this);\n  }\n\n  // Look inside the base directory for any directories that seem to be dats\n  discoverDats() {\n    return getDirectories(this.baseDir)\n      .map((name) => {\n        console.log(`Attempting to load dir: ${chalk.bold(name)} as a dat`);\n        const opts = {\n          name,\n          createIfMissing: false,\n          sparse: true,\n        };\n        return this.importDat(opts);\n      })\n      .then(() => this.cleanupDatsRegistry())\n      .then(() => this.importDatsFromDB())\n      .then(() => this);\n  }\n\n  // Imports dats listed in the dats table of the database\n  importDatsFromDB() {\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir)) // directory exists\n      .filter(dat => !dat.dir.startsWith(this.baseDir)) // not in data directory\n      .filter(dat => !(dat.key in this.dats.keys())) // not in registry\n      .each(dat => this.importDir(dat.dir, dat.name))\n      .then(() => console.log('Imported dats from DB'));\n  }\n\n  // Imports a directory on the local filesystem as a dat.\n  // This should not be called on any directories inside `dataDir`, which are loaded differently\n  importDir(directory, name = false) {\n    console.log(`Attempting to import local directory: ${directory}`);\n    const opts = {\n      directory,\n      name: name || directory.split(path.sep).slice(-1)[0],\n    };\n    return this.importDat(opts);\n  }\n\n  // Importing a remote dat by its key\n  importRemoteDat(key, name = false) {\n    console.log(`Attempting to import remote dat: ${key}`);\n    const opts = {\n      key,\n      name: name || key,\n      sparse: true,\n    };\n    return this.importDat(opts);\n  }\n\n  // Does the work of importing a functional dat into the catalog\n  importDat(opts) {\n    if ('key' in opts && opts.key in this.dats) {\n      // The dat is already loaded, we shouldn't reimport it\n      console.log(`You are trying to import a dat that is already loaded: ${opts.key}`);\n      return Promise.resolve(false);\n    }\n    if (!opts.directory) {\n      opts.directory = path.format({\n        dir: this.baseDir,\n        base: (opts.name) ? opts.name : opts.key,\n      });\n    }\n    const newDat = new DatWrapper(opts, this);\n    return newDat.run()\n      .then(() => this.registerDat(newDat))\n      .then(() => newDat.importFiles())\n      .then(() => listDatContents(newDat.dat)) // this function can be made a method of dat class too.\n      .each(entry => this.importDatEntry(newDat, entry))\n      .catch((err) => {\n        console.log(`* Something went wrong when importing ${opts.directory}`);\n        console.log(err);\n      });\n  }\n\n  // Registers dat in catalog array and in database (@todo)\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    return this.removeDatFromDb(datkey)\n      .then(() => this.clearDatEntries(datkey))\n      .then(() => this.addDatToDb(datkey, dw.name, dw.directory))\n      .finally(() => { this.dats[datkey] = dw; })\n      .catch(e => console.log(e));\n  }\n\n  addDatToDb(dat, name, dir) {\n    return this.db.insert({ dat, name, dir }).into('dats');\n  }\n\n  removeDatFromDb(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Remove all entries for a dat\n  clearDatEntries(datKey) {\n    return this.db('texts').where('dat', datKey).del();\n  }\n\n  // Adds an entry from a Dat\n  importDatEntry(dat, entry) {\n    const arr = entry.name.split(path.sep);\n    if (arr[0] === '') {\n      arr.shift();\n    }\n    if (arr.length > 2) {\n      const downloaded = this.pathIsDownloaded(dat, entry.name);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, entry.name);\n      const name = parser(arr[0]);\n      return this.db.insert({\n        dat: dat.key,\n        title_hash: '',\n        file_hash: '',\n        author: arr[0],\n        author_sort: `${name.last}, ${name.first}`,\n        title: arr[1],\n        file: arr[2],\n        downloaded,\n      }).into('texts');\n    }\n    return Promise.resolve(false);\n  }\n\n  // Returns the path to a dat\n  // This is broken until i can understand making sqlite async\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (opts.dat) {\n      return this.download(opts.dat, opts)\n        .then(() => this.scanForDownloads(opts, opts.dat));\n    }\n    // With no dat provided, we must query for it\n    return this.getDatsWith(opts)\n      .map(row => row)\n      .each(row => this.download(row.dat, opts))\n      .then(() => this.scanForDownloads(opts)); // @todo: somehow get the dat param in here\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the downloaded column in the texts table\n  scanForDownloads(opts, dat = false) {\n    return this.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  download(dat, opts) {\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title, opts.file));\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title));\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author));\n    }\n    // If no opts are provided, but a dat is then download the whole dat\n    console.log(`checking out everything from ${opts.dat}`);\n    return this.dats[dat].downloadContent();\n  }\n\n  // Synchronous\n  pathIsDownloaded = (dat, filePath) => fs.existsSync(path.join(dat.directory, filePath));\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.pathIsDownloaded(\n      this.dats[dbRow.dat],\n      path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Gets a count of authors in the catalog\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db('texts')\n      .where('title', 'like', s)\n      .orWhere('author', 'like', s);\n    if (dat) {\n      if (typeof dat === 'string') {\n        exp.where('dat', dat);\n      } else if (Array.isArray(dat)) {\n        exp.whereIn('dat', dat);\n      }\n    }\n    return exp.orderBy('author_sort', 'title_sort');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith) {\n    const exp = this.db.select('author').from('texts')\n      .countDistinct('title as count');\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('author')\n      .orderBy('author_sort');\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters() {\n    return this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select()\n      .from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author) {\n    return this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author)\n      .orderBy('title');\n  }\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat = false) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat = false, distinct = false) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (dat) {\n      if (typeof dat === 'string') {\n        exp.where('dat', dat);\n      } else {\n        exp.whereIn('dat', dat);\n      }\n    }\n    if (opts.author) {\n      exp.where('author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('file', opts.file);\n    }\n    return exp.orderBy('dat', 'author', 'title');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat = false, file = false) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    if (dat) {\n      exp.where('dat', dat);\n    }\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => opf2js(path.join(fp.dir, author, title, mfn)));\n  }\n\n}\n\nexport function createCatalog(dataDir = false) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  return catalog.initDatabase().then(() => catalog);\n}\n\nexport default Catalog;\n"]}