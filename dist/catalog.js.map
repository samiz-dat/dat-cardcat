{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","getDats","db","select","getDat","key","where","dats","client","connection","filename","format","dir","base","useNullAsDefault","isReady","initDatabase","schema","createTableIfNotExists","table","string","boolean","then","catch","e","console","error","cleanupDatsRegistry","log","map","dat","filter","each","bold","removeDatFromDb","clearDatEntries","discoverDats","name","opts","createIfMissing","sparse","importDat","importDatsFromDB","startsWith","keys","importDir","directory","split","sep","slice","importRemoteDat","resolve","newDat","run","registerDat","entry","importDatEntry","err","dw","datkey","toString","addDatToDb","finally","insert","into","datKey","del","arr","shift","length","downloaded","pathIsDownloaded","downloadedStr","title_hash","file_hash","author","author_sort","last","first","title","file","pathToDat","from","checkout","download","scanForDownloads","getDatsWith","row","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","downloadContent","join","filePath","existsSync","dbRow","update","search","query","s","orWhere","orderBy","getAuthors","startingWith","exp","countDistinct","groupBy","getAuthorLetters","column","raw","distinct","getTitlesForAuthor","havingIn","getFilesFromDat","getFiles","getOpf","mfn","fp","dataDir","dataDirFinal","process","cwd","get","mkdirSync","catalog"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgXgBA,a,GAAAA,a,CAhXhB,4B,2CACA,wB,uCACA,oC,mDACA,4B,2CACA,wD,qEACA,8B,6CACA,kC,+CAEA,4B,yCACA,4BACA,gD,8FACA;AAEA;AACO,MAAMC,OAAN,CAAc,CACnBC,YAAYC,OAAZ,EAAqB,MAoVrBC,OApVqB,GAoVX,MAAM,KAAKC,EAAL,CAAQ,MAAR,EAAgBC,MAAhB,EApVK,MAqVrBC,MArVqB,GAqVZC,OAAO,KAAKH,EAAL,CAAQ,MAAR,EAAgBC,MAAhB,GAAyBG,KAAzB,CAA+B,KAA/B,EAAsCD,GAAtC,CArVK,CACnB,KAAKL,OAAL,GAAeA,OAAf,CACA,KAAKO,IAAL,GAAY,EAAZ,CACA,KAAKL,EAAL,GAAU,oBAAG,EACXM,QAAQ,SADG,EAEXC,YAAY,EACVC,UAAU,eAAKC,MAAL,CAAY,EACpBC,KAAK,KAAKZ,OADU,EAEpBa,MAAM,YAFc,EAAZ,CADA,EAFD,EAQXC,kBAAkB,IARP,EAAH,CAAV,CAUA,KAAKC,OAAL,GAAe,KAAf,CACD,CAEDC,eAAe,CACb,OAAO,KAAKd,EAAL,CAAQe,MAAR,CAAeC,sBAAf,CAAsC,MAAtC,EAA+CC,KAAD,IAAW,CAC9DA,MAAMC,MAAN,CAAa,KAAb,EACAD,MAAMC,MAAN,CAAa,MAAb,EACAD,MAAMC,MAAN,CAAa,KAAb,EAH8D,CAI9D;AACD,KALM,EAMNF,sBANM,CAMiB,OANjB,EAM2BC,KAAD,IAAW,CAC1CA,MAAMC,MAAN,CAAa,KAAb,EACAD,MAAMC,MAAN,CAAa,YAAb,EACAD,MAAMC,MAAN,CAAa,WAAb,EACAD,MAAMC,MAAN,CAAa,QAAb,EACAD,MAAMC,MAAN,CAAa,aAAb,EACAD,MAAMC,MAAN,CAAa,OAAb,EACAD,MAAMC,MAAN,CAAa,MAAb,EACAD,MAAME,OAAN,CAAc,YAAd,EACD,CAfM,EAgBNH,sBAhBM,CAgBiB,cAhBjB,EAgBkCC,KAAD,IAAW,CACjDA,MAAMC,MAAN,CAAa,YAAb,EACAD,MAAMC,MAAN,CAAa,QAAb,EAFiD,CAGjD;AACD,KApBM,EAqBNE,IArBM,CAqBD,MAAM,CAAE,KAAKP,OAAL,GAAe,IAAf,CAAsB,CArB7B,EAsBNQ,KAtBM,CAsBAC,KAAKC,QAAQC,KAAR,CAAcF,CAAd,CAtBL,CAAP,CAuBD,CAzCkB,CA2CnB;AACA;AACA;AACAG,wBAAsB,CACpBF,QAAQG,GAAR,CAAY,+BAAZ,EACA,OAAO,KAAK3B,OAAL,GACJ4B,GADI,CACAC,OAAOA,GADP,EAEJC,MAFI,CAEGD,OAAO,yBAAQA,IAAIlB,GAAZ,CAFV,EAGJoB,IAHI,CAGEF,GAAD,IAAS,CACbL,QAAQG,GAAR,CAAa,aAAY,gBAAMK,IAAN,CAAWH,IAAIlB,GAAf,CAAoB,6BAA7C,EACA,OAAO,KAAKsB,eAAL,CAAqBJ,IAAIA,GAAzB,EACJR,IADI,CACC,MAAM,KAAKa,eAAL,CAAqBL,IAAIA,GAAzB,CADP,CAAP,CAED,CAPI,EAQJR,IARI,CAQC,MAAM,IARP,CAAP,CASD,CAzDkB,CA2DnB;AACAc,iBAAe,CACb,OAAO,gCAAe,KAAKpC,OAApB,EACJ6B,GADI,CACCQ,IAAD,IAAU,CACbZ,QAAQG,GAAR,CAAa,2BAA0B,gBAAMK,IAAN,CAAWI,IAAX,CAAiB,WAAxD,EACA,MAAMC,OAAO,EACXD,IADW,EAEXE,iBAAiB,KAFN,EAGXC,QAAQ,IAHG,EAAb,CAKA,OAAO,KAAKC,SAAL,CAAeH,IAAf,CAAP,CACD,CATI,EAUJhB,IAVI,CAUC,MAAM,KAAKK,mBAAL,EAVP,EAWJL,IAXI,CAWC,MAAM,KAAKoB,gBAAL,EAXP,EAYJpB,IAZI,CAYC,MAAM,IAZP,CAAP,CAaD,CA1EkB,CA4EnB;AACAoB,qBAAmB,CACjB,KAAKzC,OAAL,GACG4B,GADH,CACOC,OAAOA,GADd,EAEGC,MAFH,CAEUD,OAAO,yBAAQA,IAAIlB,GAAZ,CAFjB,EAEmC;AAFnC,KAGGmB,MAHH,CAGUD,OAAO,CAACA,IAAIlB,GAAJ,CAAQ+B,UAAR,CAAmB,KAAK3C,OAAxB,CAHlB,EAGoD;AAHpD,KAIG+B,MAJH,CAIUD,OAAO,EAAEA,IAAIzB,GAAJ,IAAW,KAAKE,IAAL,CAAUqC,IAAV,EAAb,CAJjB,EAIiD;AAJjD,KAKGZ,IALH,CAKQF,OAAO,KAAKe,SAAL,CAAef,IAAIlB,GAAnB,EAAwBkB,IAAIO,IAA5B,CALf,EAMGf,IANH,CAMQ,MAAMG,QAAQG,GAAR,CAAY,uBAAZ,CANd,EAOD,CArFkB,CAuFnB;AACA;AACAiB,YAAUC,SAAV,EAAqBT,OAAO,KAA5B,EAAmC,CACjCZ,QAAQG,GAAR,CAAa,yCAAwCkB,SAAU,EAA/D,EACA,MAAMR,OAAO,EACXQ,SADW,EAEXT,MAAMA,QAAQS,UAAUC,KAAV,CAAgB,eAAKC,GAArB,EAA0BC,KAA1B,CAAgC,CAAC,CAAjC,EAAoC,CAApC,CAFH,EAAb,CAIA,OAAO,KAAKR,SAAL,CAAeH,IAAf,CAAP,CACD,CAhGkB,CAkGnB;AACAY,kBAAgB7C,GAAhB,EAAqBgC,OAAO,KAA5B,EAAmC,CACjCZ,QAAQG,GAAR,CAAa,oCAAmCvB,GAAI,EAApD,EACA,MAAMiC,OAAO,EACXjC,GADW,EAEXgC,MAAMA,QAAQhC,GAFH,EAGXmC,QAAQ,IAHG,EAAb,CAKA,OAAO,KAAKC,SAAL,CAAeH,IAAf,CAAP,CACD,CA3GkB,CA6GnB;AACAG,YAAUH,IAAV,EAAgB,CACd,IAAI,SAASA,IAAT,IAAiBA,KAAKjC,GAAL,IAAY,KAAKE,IAAtC,EAA4C,CAC1C;AACAkB,cAAQG,GAAR,CAAa,0DAAyDU,KAAKjC,GAAI,EAA/E,EACA,OAAO,mBAAQ8C,OAAR,CAAgB,KAAhB,CAAP,CACD,CACD,IAAI,CAACb,KAAKQ,SAAV,EAAqB,CACnBR,KAAKQ,SAAL,GAAiB,eAAKnC,MAAL,CAAY,EAC3BC,KAAK,KAAKZ,OADiB,EAE3Ba,MAAOyB,KAAKD,IAAN,GAAcC,KAAKD,IAAnB,GAA0BC,KAAKjC,GAFV,EAAZ,CAAjB,CAID,CACD,MAAM+C,SAAS,kBAAed,IAAf,EAAqB,IAArB,CAAf,CACA,OAAOc,OAAOC,GAAP,GACJ/B,IADI,CACC,MAAM,KAAKgC,WAAL,CAAiBF,MAAjB,CADP,EAEJ9B,IAFI,CAEC,MAAM,sBAAY8B,MAAZ,CAFP,EAGJ9B,IAHI,CAGC,MAAM,0BAAgB8B,OAAOtB,GAAvB,CAHP,EAIJE,IAJI,CAICuB,SAAS,KAAKC,cAAL,CAAoBJ,MAApB,EAA4BG,KAA5B,CAJV,EAKJhC,KALI,CAKGkC,GAAD,IAAS,CACdhC,QAAQG,GAAR,CAAa,yCAAwCU,KAAKQ,SAAU,EAApE,EACArB,QAAQG,GAAR,CAAY6B,GAAZ,EACD,CARI,CAAP,CASD,CApIkB,CAsInB;AACAH,cAAYI,EAAZ,EAAgB,CACd,MAAMC,SAASD,GAAG5B,GAAH,CAAOzB,GAAP,CAAWuD,QAAX,CAAoB,KAApB,CAAf,CACAnC,QAAQG,GAAR,CAAa,eAAc+B,MAAO,mBAAlC,EACA,OAAO,KAAKzB,eAAL,CAAqByB,MAArB,EACJrC,IADI,CACC,MAAM,KAAKa,eAAL,CAAqBwB,MAArB,CADP,EAEJrC,IAFI,CAEC,MAAM,KAAKuC,UAAL,CAAgBF,MAAhB,EAAwBD,GAAGrB,IAA3B,EAAiCqB,GAAGZ,SAApC,CAFP,EAGJgB,OAHI,CAGI,MAAM,CAAE,KAAKvD,IAAL,CAAUoD,MAAV,IAAoBD,EAApB,CAAyB,CAHrC,EAIJnC,KAJI,CAIEC,KAAKC,QAAQG,GAAR,CAAYJ,CAAZ,CAJP,CAAP,CAKD,CAEDqC,WAAW/B,GAAX,EAAgBO,IAAhB,EAAsBzB,GAAtB,EAA2B,CACzB,OAAO,KAAKV,EAAL,CAAQ6D,MAAR,CAAe,EAAEjC,GAAF,EAAOO,IAAP,EAAazB,GAAb,EAAf,EAAmCoD,IAAnC,CAAwC,MAAxC,CAAP,CACD,CAED9B,gBAAgB+B,MAAhB,EAAwB,CACtB,OAAO,KAAK/D,EAAL,CAAQ,MAAR,EAAgBI,KAAhB,CAAsB,KAAtB,EAA6B2D,MAA7B,EAAqCC,GAArC,EAAP,CACD,CAvJkB,CAyJnB;AACA/B,kBAAgB8B,MAAhB,EAAwB,CACtB,OAAO,KAAK/D,EAAL,CAAQ,OAAR,EAAiBI,KAAjB,CAAuB,KAAvB,EAA8B2D,MAA9B,EAAsCC,GAAtC,EAAP,CACD,CA5JkB,CA8JnB;AACAV,iBAAe1B,GAAf,EAAoByB,KAApB,EAA2B,CACzB,MAAMY,MAAMZ,MAAMlB,IAAN,CAAWU,KAAX,CAAiB,eAAKC,GAAtB,CAAZ,CACA,IAAImB,IAAI,CAAJ,MAAW,EAAf,EAAmB,CACjBA,IAAIC,KAAJ,GACD,CACD,IAAID,IAAIE,MAAJ,GAAa,CAAjB,EAAoB,CAClB,MAAMC,aAAa,KAAKC,gBAAL,CAAsBzC,GAAtB,EAA2ByB,MAAMlB,IAAjC,CAAnB,CACA,MAAMmC,gBAAiBF,UAAD,GAAe,KAAf,GAAuB,KAA7C,CACA7C,QAAQG,GAAR,CAAY,gBAAMK,IAAN,CAAW,SAAX,CAAZ,EAAmCuC,aAAnC,EAAkDjB,MAAMlB,IAAxD,EACA,MAAMA,OAAO,iCAAO8B,IAAI,CAAJ,CAAP,CAAb,CACA,OAAO,KAAKjE,EAAL,CAAQ6D,MAAR,CAAe,EACpBjC,KAAKA,IAAIzB,GADW,EAEpBoE,YAAY,EAFQ,EAGpBC,WAAW,EAHS,EAIpBC,QAAQR,IAAI,CAAJ,CAJY,EAKpBS,aAAc,GAAEvC,KAAKwC,IAAK,KAAIxC,KAAKyC,KAAM,EALrB,EAMpBC,OAAOZ,IAAI,CAAJ,CANa,EAOpBa,MAAMb,IAAI,CAAJ,CAPc,EAQpBG,UARoB,EAAf,EASJN,IATI,CASC,OATD,CAAP,CAUD,CACD,OAAO,mBAAQb,OAAR,CAAgB,KAAhB,CAAP,CACD,CArLkB,CAuLnB;AACA;AACA8B,YAAUhB,MAAV,EAAkB,CAChB,OAAO,KAAK/D,EAAL,CAAQC,MAAR,CAAe,KAAf,EAAsB+E,IAAtB,CAA2B,MAA3B,EAAmC5E,KAAnC,CAAyC,KAAzC,EAAgD2D,MAAhD,EAAwDa,KAAxD,EAAP,CACD,CA3LkB,CA6LnB;AACA;AACAK,WAAS7C,IAAT,EAAe,CACb,IAAIA,KAAKR,GAAT,EAAc,CACZ,OAAO,KAAKsD,QAAL,CAAc9C,KAAKR,GAAnB,EAAwBQ,IAAxB,EACJhB,IADI,CACC,MAAM,KAAK+D,gBAAL,CAAsB/C,IAAtB,EAA4BA,KAAKR,GAAjC,CADP,CAAP,CAED,CAJY,CAKb;AACA,WAAO,KAAKwD,WAAL,CAAiBhD,IAAjB,EACJT,GADI,CACA0D,OAAOA,GADP,EAEJvD,IAFI,CAECuD,OAAO,KAAKH,QAAL,CAAcG,IAAIzD,GAAlB,EAAuBQ,IAAvB,CAFR,EAGJhB,IAHI,CAGC,MAAM,KAAK+D,gBAAL,CAAsB/C,IAAtB,CAHP,CAAP,CANa,CAS+B;AAC7C,GAzMkB,CA2MnB;AACA;AACA+C,mBAAiB/C,IAAjB,EAAuBR,MAAM,KAA7B,EAAoC,CAClC,OAAO,KAAK0D,YAAL,CAAkBlD,IAAlB,EAAwBR,GAAxB,EACJR,IADI,CACCmE,QAAQA,KAAK1D,MAAL,CAAY2D,OAAO,KAAKC,gBAAL,CAAsBD,GAAtB,CAAnB,CADT,EAEJ1D,IAFI,CAECuD,OAAO,KAAKK,aAAL,CAAmBL,IAAIzD,GAAvB,EAA4ByD,IAAIZ,MAAhC,EAAwCY,IAAIR,KAA5C,EAAmDQ,IAAIP,IAAvD,CAFR,CAAP,CAGD,CAEDI,SAAStD,GAAT,EAAcQ,IAAd,EAAoB,CAClB,IAAIA,KAAKqC,MAAL,IAAerC,KAAKyC,KAApB,IAA6BzC,KAAK0C,IAAtC,EAA4C,CAC1CvD,QAAQG,GAAR,CAAa,gBAAeU,KAAKqC,MAAO,IAAGrC,KAAKyC,KAAM,IAAGzC,KAAK0C,IAAK,SAAQlD,GAAI,EAA/E,EACA,OAAO,KAAKvB,IAAL,CAAUuB,GAAV,EAAe+D,eAAf,CAA+B,eAAKC,IAAL,CAAUxD,KAAKqC,MAAf,EAAuBrC,KAAKyC,KAA5B,EAAmCzC,KAAK0C,IAAxC,CAA/B,CAAP,CACD,CAHD,MAGO,IAAI1C,KAAKqC,MAAL,IAAerC,KAAKyC,KAAxB,EAA+B,CACpCtD,QAAQG,GAAR,CAAa,gBAAeU,KAAKqC,MAAO,IAAGrC,KAAKyC,KAAM,SAAQjD,GAAI,EAAlE,EACA,OAAO,KAAKvB,IAAL,CAAUuB,GAAV,EAAe+D,eAAf,CAA+B,eAAKC,IAAL,CAAUxD,KAAKqC,MAAf,EAAuBrC,KAAKyC,KAA5B,CAA/B,CAAP,CACD,CAHM,MAGA,IAAIzC,KAAKqC,MAAT,EAAiB,CACtBlD,QAAQG,GAAR,CAAa,gBAAeU,KAAKqC,MAAO,SAAQ7C,GAAI,EAApD,EACA,OAAO,KAAKvB,IAAL,CAAUuB,GAAV,EAAe+D,eAAf,CAA+B,eAAKC,IAAL,CAAUxD,KAAKqC,MAAf,CAA/B,CAAP,CACD,CAViB,CAWlB;AACAlD,YAAQG,GAAR,CAAa,gCAA+BU,KAAKR,GAAI,EAArD,EACA,OAAO,KAAKvB,IAAL,CAAUuB,GAAV,EAAe+D,eAAf,EAAP,CACD,CAjOkB,CAmOnB;AACAtB,mBAAiBzC,GAAjB,EAAsBiE,QAAtB,EAAgC,CAC9B,OAAO,aAAGC,UAAH,CAAc,eAAKF,IAAL,CAAUhE,IAAIgB,SAAd,EAAyBiD,QAAzB,CAAd,CAAP,CACD,CAtOkB,CAwOnB;AACAJ,mBAAiBM,KAAjB,EAAwB,CACtB,OAAO,KAAK1B,gBAAL,CACL,KAAKhE,IAAL,CAAU0F,MAAMnE,GAAhB,CADK,EAEL,eAAKgE,IAAL,CAAUG,MAAMtB,MAAhB,EAAwBsB,MAAMlB,KAA9B,EAAqCkB,MAAMjB,IAA3C,CAFK,CAAP,CAGD,CA7OkB,CA+OnB;AACAY,gBAAc9D,GAAd,EAAmB6C,MAAnB,EAA2BI,KAA3B,EAAkCC,IAAlC,EAAwCV,aAAa,IAArD,EAA2D,CACzD,OAAO,KAAKpE,EAAL,CAAQ,OAAR,EACJI,KADI,CACE,KADF,EACSwB,GADT,EAEJxB,KAFI,CAEE,QAFF,EAEYqE,MAFZ,EAGJrE,KAHI,CAGE,OAHF,EAGWyE,KAHX,EAIJzE,KAJI,CAIE,MAJF,EAIU0E,IAJV,EAKJkB,MALI,CAKG,EACN5B,UADM,EALH,CAAP,CAQD,CAzPkB,CA2PnB;AACA6B,SAAOC,KAAP,EAAc,CACZ,MAAMC,IAAK,IAAGD,KAAM,GAApB,CACA,OAAO,KAAKlG,EAAL,CAAQ,OAAR,EACJI,KADI,CACE,OADF,EACW,MADX,EACmB+F,CADnB,EAEJC,OAFI,CAEI,QAFJ,EAEc,MAFd,EAEsBD,CAFtB,EAGJE,OAHI,CAGI,aAHJ,EAGmB,YAHnB,CAAP,CAID,CAlQkB,CAoQnB;AACAC,aAAWC,eAAe,KAA1B,EAAiC,CAC/B,MAAMC,MAAM,KAAKxG,EAAL,CAAQC,MAAR,CAAe,QAAf,EAAyB+E,IAAzB,CAA8B,OAA9B,EACTyB,aADS,CACK,gBADL,CAAZ,CAEA,IAAIF,YAAJ,EAAkB,CAChB,MAAMJ,IAAK,GAAEI,YAAa,GAA1B,CACAC,IAAIpG,KAAJ,CAAU,aAAV,EAAyB,MAAzB,EAAiC+F,CAAjC,EACD,CACD,OAAOK,IACJE,OADI,CACI,QADJ,EAEJL,OAFI,CAEI,aAFJ,CAAP,CAGD,CA/QkB,CAiRnB;AACAM,qBAAmB,CACjB,OAAO,KAAK3G,EAAL,CAAQ4G,MAAR,CAAe,KAAK5G,EAAL,CAAQ6G,GAAR,CAAY,0CAAZ,CAAf,EACJ5G,MADI,GAEJ+E,IAFI,CAEC,OAFD,EAGJ8B,QAHI,CAGK,QAHL,EAIJT,OAJI,CAII,QAJJ,CAAP,CAKD,CAEDU,mBAAmBtC,MAAnB,EAA2B,CACzB,OAAO,KAAKzE,EAAL,CAAQ,OAAR,EACJ8G,QADI,CACK,KADL,EACY,OADZ,EAEJ1G,KAFI,CAEE,QAFF,EAEYqE,MAFZ,EAGJ4B,OAHI,CAGI,OAHJ,CAAP,CAID,CA/RkB,CAiSnB;AACA;AACAjB,cAAYhD,IAAZ,EAAkBR,MAAM,KAAxB,EAA+B,CAC7B,OAAO,KAAK0D,YAAL,CAAkBlD,IAAlB,EAAwBR,GAAxB,EAA6B,KAA7B,CAAP,CACD,CArSkB,CAuSnB;AACA;AACA0D,eAAalD,IAAb,EAAmBR,MAAM,KAAzB,EAAgCkF,WAAW,KAA3C,EAAkD,CAChD,MAAMN,MAAM,KAAKxG,EAAL,CAAQ,OAAR,CAAZ,CACA,IAAI8G,QAAJ,EAAc,CACZN,IAAIM,QAAJ,CAAaA,QAAb,EACD,CACD,IAAIlF,GAAJ,EAAS,CACP,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,CAC3B4E,IAAIpG,KAAJ,CAAU,KAAV,EAAiBwB,GAAjB,EACD,CAFD,MAEO,CACL4E,IAAIQ,QAAJ,CAAa,KAAb,EAAoBpF,GAApB,EACD,CACF,CACD,IAAIQ,KAAKqC,MAAT,EAAiB,CACf+B,IAAIpG,KAAJ,CAAU,QAAV,EAAoBgC,KAAKqC,MAAzB,EACD,CACD,IAAIrC,KAAKyC,KAAT,EAAgB,CACd2B,IAAIpG,KAAJ,CAAU,OAAV,EAAmBgC,KAAKyC,KAAxB,EACD,CACD,IAAIzC,KAAK0C,IAAT,EAAe,CACb0B,IAAIpG,KAAJ,CAAU,MAAV,EAAkBgC,KAAK0C,IAAvB,EACD,CACD,OAAO0B,IAAIH,OAAJ,CAAY,KAAZ,EAAmB,QAAnB,EAA6B,OAA7B,CAAP,CACD,CAEDY,gBAAgBrF,GAAhB,EAAqB,CACnB,OAAO,KAAK5B,EAAL,CAAQ,OAAR,EACJI,KADI,CACE,KADF,EACSwB,GADT,EACcyE,OADd,CACsB,KADtB,EAC6B,MAD7B,CAAP,CAED,CApUkB,CAsUnB;AACA;AACAa,WAASzC,MAAT,EAAiBI,KAAjB,EAAwBjD,MAAM,KAA9B,EAAqCkD,OAAO,KAA5C,EAAmD,CACjD,MAAM0B,MAAM,KAAKxG,EAAL,CAAQ,OAAR,EACTI,KADS,CACH,QADG,EACOqE,MADP,EAETrE,KAFS,CAEH,OAFG,EAEMyE,KAFN,CAAZ,CAGA,IAAIjD,GAAJ,EAAS,CACP4E,IAAIpG,KAAJ,CAAU,KAAV,EAAiBwB,GAAjB,EACD,CACD,IAAIkD,IAAJ,EAAU,CACR0B,IAAIpG,KAAJ,CAAU,MAAV,EAAkB0E,IAAlB,EACD,CACD,OAAO0B,IAAIH,OAAJ,CAAY,KAAZ,EAAmB,MAAnB,CAAP,CACD,CAnVkB,CAwVnB;AACAc,SAAO1C,MAAP,EAAeI,KAAf,EAAsBjD,MAAM,KAA5B,EAAmC,CACjC,MAAMwF,MAAM,cAAZ,CADiC,CACL;AAC5B,WAAO,KAAKF,QAAL,CAAczC,MAAd,EAAsBI,KAAtB,EAA6BjD,GAA7B,EAAkCwF,GAAlC,EAAuCxC,KAAvC,GACJxD,IADI,CACCiE,OAAO,KAAKN,SAAL,CAAeM,IAAIzD,GAAnB,CADR,EAEJR,IAFI,CAECiG,MAAM,iBAAO,eAAKzB,IAAL,CAAUyB,GAAG3G,GAAb,EAAkB+D,MAAlB,EAA0BI,KAA1B,EAAiCuC,GAAjC,CAAP,CAFP,CAAP,CAGD,CA9VkB,C,QAARxH,O,GAAAA,O,CAkWN,SAASD,aAAT,CAAuB2H,UAAU,KAAjC,EAAwC,CAC7C;AACA,MAAIC,eAAe,eAAK3B,IAAL,CAAU4B,QAAQC,GAAR,EAAV,EAAyB,iBAAOC,GAAP,CAAW,SAAX,CAAzB,CAAnB,CACAH,eAAeD,WAAWC,YAA1B,CAH6C,CAK7C;AACA,MAAI,CAAC,aAAGzB,UAAH,CAAcyB,YAAd,CAAL,EAAkC,CAChC,aAAGI,SAAH,CAAaJ,YAAb,EACD,CAED,MAAMK,UAAU,IAAIhI,OAAJ,CAAY2H,YAAZ,CAAhB,CACA,OAAOK,QAAQ9G,YAAR,GAAuBM,IAAvB,CAA4B,MAAMwG,OAAlC,CAAP,CACD,C,kBAEchI,O","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport db from 'knex';\nimport parser from 'another-name-parser';\nimport chalk from 'chalk';\nimport config from './config';\n\nimport DatWrapper, { listDatContents, importFiles } from './dat';\nimport { opf2js } from './opf';\nimport { getDirectories, notADir } from './utils/filesystem';\n// @todo: this.db.close(); should be called on shutdown\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename: path.format({\n          dir: this.baseDir,\n          base: 'catalog.db',\n        }),\n      },\n      useNullAsDefault: true,\n    });\n    this.isReady = false;\n  }\n\n  initDatabase() {\n    return this.db.schema.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n\n  // Every imported and added dat gets added to the `dats` table of the database. If\n  // the directories are deleted then these db entries are useless and should be removed.\n  // This will simply confirm that every dat directory in the db still exists.\n  cleanupDatsRegistry() {\n    console.log('Cleaning up the dats registry');\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} (directory does not exist)`);\n        return this.removeDatFromDb(dat.dat)\n          .then(() => this.clearDatEntries(dat.dat));\n      })\n      .then(() => this);\n  }\n\n  // Look inside the base directory for any directories that seem to be dats\n  discoverDats() {\n    return getDirectories(this.baseDir)\n      .map((name) => {\n        console.log(`Attempting to load dir: ${chalk.bold(name)} as a dat`);\n        const opts = {\n          name,\n          createIfMissing: false,\n          sparse: true,\n        };\n        return this.importDat(opts);\n      })\n      .then(() => this.cleanupDatsRegistry())\n      .then(() => this.importDatsFromDB())\n      .then(() => this);\n  }\n\n  // Imports dats listed in the dats table of the database\n  importDatsFromDB() {\n    this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir)) // directory exists\n      .filter(dat => !dat.dir.startsWith(this.baseDir)) // not in data directory\n      .filter(dat => !(dat.key in this.dats.keys())) // not in registry\n      .each(dat => this.importDir(dat.dir, dat.name))\n      .then(() => console.log('Imported dats from DB'));\n  }\n\n  // Imports a directory on the local filesystem as a dat.\n  // This should not be called on any directories inside `dataDir`, which are loaded differently\n  importDir(directory, name = false) {\n    console.log(`Attempting to import local directory: ${directory}`);\n    const opts = {\n      directory,\n      name: name || directory.split(path.sep).slice(-1)[0],\n    };\n    return this.importDat(opts);\n  }\n\n  // Importing a remote dat by its key\n  importRemoteDat(key, name = false) {\n    console.log(`Attempting to import remote dat: ${key}`);\n    const opts = {\n      key,\n      name: name || key,\n      sparse: true,\n    };\n    return this.importDat(opts);\n  }\n\n  // Does the work of importing a functional dat into the catalog\n  importDat(opts) {\n    if ('key' in opts && opts.key in this.dats) {\n      // The dat is already loaded, we shouldn't reimport it\n      console.log(`You are trying to import a dat that is already loaded: ${opts.key}`);\n      return Promise.resolve(false);\n    }\n    if (!opts.directory) {\n      opts.directory = path.format({\n        dir: this.baseDir,\n        base: (opts.name) ? opts.name : opts.key,\n      });\n    }\n    const newDat = new DatWrapper(opts, this);\n    return newDat.run()\n      .then(() => this.registerDat(newDat))\n      .then(() => importFiles(newDat))\n      .then(() => listDatContents(newDat.dat))\n      .each(entry => this.importDatEntry(newDat, entry))\n      .catch((err) => {\n        console.log(`* Something went wrong when importing ${opts.directory}`);\n        console.log(err);\n      });\n  }\n\n  // Registers dat in catalog array and in database (@todo)\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    return this.removeDatFromDb(datkey)\n      .then(() => this.clearDatEntries(datkey))\n      .then(() => this.addDatToDb(datkey, dw.name, dw.directory))\n      .finally(() => { this.dats[datkey] = dw; })\n      .catch(e => console.log(e));\n  }\n\n  addDatToDb(dat, name, dir) {\n    return this.db.insert({ dat, name, dir }).into('dats');\n  }\n\n  removeDatFromDb(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Remove all entries for a dat\n  clearDatEntries(datKey) {\n    return this.db('texts').where('dat', datKey).del();\n  }\n\n  // Adds an entry from a Dat\n  importDatEntry(dat, entry) {\n    const arr = entry.name.split(path.sep);\n    if (arr[0] === '') {\n      arr.shift();\n    }\n    if (arr.length > 2) {\n      const downloaded = this.pathIsDownloaded(dat, entry.name);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, entry.name);\n      const name = parser(arr[0]);\n      return this.db.insert({\n        dat: dat.key,\n        title_hash: '',\n        file_hash: '',\n        author: arr[0],\n        author_sort: `${name.last}, ${name.first}`,\n        title: arr[1],\n        file: arr[2],\n        downloaded,\n      }).into('texts');\n    }\n    return Promise.resolve(false);\n  }\n\n  // Returns the path to a dat\n  // This is broken until i can understand making sqlite async\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (opts.dat) {\n      return this.download(opts.dat, opts)\n        .then(() => this.scanForDownloads(opts, opts.dat));\n    }\n    // With no dat provided, we must query for it\n    return this.getDatsWith(opts)\n      .map(row => row)\n      .each(row => this.download(row.dat, opts))\n      .then(() => this.scanForDownloads(opts)); // @todo: somehow get the dat param in here\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the entries in the texts table\n  scanForDownloads(opts, dat = false) {\n    return this.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  download(dat, opts) {\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title, opts.file));\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title));\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author));\n    }\n    // If no opts are provided, but a dat is then download the whole dat\n    console.log(`checking out everything from ${opts.dat}`);\n    return this.dats[dat].downloadContent();\n  }\n\n  // Synchronous\n  pathIsDownloaded(dat, filePath) {\n    return fs.existsSync(path.join(dat.directory, filePath));\n  }\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.pathIsDownloaded(\n      this.dats[dbRow.dat],\n      path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Gets a count of authors in the catalog\n  search(query) {\n    const s = `%${query}%`;\n    return this.db('texts')\n      .where('title', 'like', s)\n      .orWhere('author', 'like', s)\n      .orderBy('author_sort', 'title_sort');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith = false) {\n    const exp = this.db.select('author').from('texts')\n      .countDistinct('title as count');\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('author')\n      .orderBy('author_sort');\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters() {\n    return this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select()\n      .from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author) {\n    return this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author)\n      .orderBy('title');\n  }\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat = false) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat = false, distinct = false) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (dat) {\n      if (typeof dat === 'string') {\n        exp.where('dat', dat);\n      } else {\n        exp.havingIn('dat', dat);\n      }\n    }\n    if (opts.author) {\n      exp.where('author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('file', opts.file);\n    }\n    return exp.orderBy('dat', 'author', 'title');\n  }\n\n  getFilesFromDat(dat) {\n    return this.db('texts')\n      .where('dat', dat).orderBy('dat', 'file');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat = false, file = false) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    if (dat) {\n      exp.where('dat', dat);\n    }\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => opf2js(path.join(fp.dir, author, title, mfn)));\n  }\n\n}\n\nexport function createCatalog(dataDir = false) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  return catalog.initDatabase().then(() => catalog);\n}\n\nexport default Catalog;\n"]}