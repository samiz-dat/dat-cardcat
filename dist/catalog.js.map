{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","getDats","db","select","getDat","key","where","dats","client","connection","filename","format","dir","base","useNullAsDefault","isReady","initDatabase","schema","createTableIfNotExists","table","string","then","catch","e","console","error","cleanupDatsRegistry","log","map","dat","filter","each","bold","removeDatFromDb","clearDatEntries","discoverDats","name","opts","createIfMissing","sparse","importDat","importDatsFromDB","startsWith","keys","importDir","directory","split","sep","slice","importRemoteDat","resolve","newDat","run","registerDat","entry","importDatEntry","err","dw","datkey","toString","addDatToDb","finally","insert","into","datKey","del","arr","shift","length","title_hash","file_hash","author","author_sort","last","first","title","file","pathToDat","from","checkout","download","getDatsWith","row","downloadContent","join","search","query","s","orWhere","orderBy","getAuthors","startingWith","exp","countDistinct","groupBy","getAuthorLetters","column","raw","distinct","getTitlesForAuthor","getDatsWithAuthor","getDatsWithTitle","getDatsWithFile","getFiles","getOpf","mfn","fp","dataDir","dataDirFinal","process","cwd","get","existsSync","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport db from 'knex';\nimport parser from 'another-name-parser';\nimport chalk from 'chalk';\nimport config from './config';\n\nimport DatWrapper, { listDatContents, importFiles } from './dat';\nimport { opf2js } from './opf';\nimport { getDirectories, notADir } from './utils/filesystem';\n// @todo: this.db.close(); should be called on shutdown\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename: path.format({\n          dir: this.baseDir,\n          base: 'catalog.db',\n        }),\n      },\n      useNullAsDefault: true,\n    });\n    this.isReady = false;\n  }\n\n  initDatabase() {\n    return this.db.schema.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n\n  // Every imported and added dat gets added to the `dats` table of the database. If\n  // the directories are deleted then these db entries are useless and should be removed.\n  // This will simply confirm that every dat directory in the db still exists.\n  cleanupDatsRegistry() {\n    console.log('Cleaning up the dats registry');\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} (directory does not exist)`);\n        return this.removeDatFromDb(dat.dat)\n          .then(() => this.clearDatEntries(dat.dat));\n      })\n      .then(() => this);\n  }\n\n  // Look inside the base directory for any directories that seem to be dats\n  discoverDats() {\n    return getDirectories(this.baseDir)\n      .map((name) => {\n        console.log(`Attempting to load dir: ${chalk.bold(name)} as a dat`);\n        const opts = {\n          name,\n          createIfMissing: false,\n          sparse: true,\n        };\n        return this.importDat(opts);\n      })\n      .then(() => this.cleanupDatsRegistry())\n      .then(() => this.importDatsFromDB())\n      .then(() => this);\n  }\n\n  // Imports dats listed in the dats table of the database\n  importDatsFromDB() {\n    this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir)) // directory exists\n      .filter(dat => !dat.dir.startsWith(this.baseDir)) // not in data directory\n      .filter(dat => !(dat.key in this.dats.keys())) // not in registry\n      .each(dat => this.importDir(dat.dir, dat.name))\n      .then(() => console.log('Imported dats from DB'));\n  }\n\n  // Imports a directory on the local filesystem as a dat.\n  // This should not be called on any directories inside `dataDir`, which are loaded differently\n  importDir(directory, name = false) {\n    console.log(`Attempting to import local directory: ${directory}`);\n    const opts = {\n      directory,\n      name: name || directory.split(path.sep).slice(-1)[0],\n    };\n    return this.importDat(opts);\n  }\n\n  // Importing a remote dat by its key\n  importRemoteDat(key, name = false) {\n    console.log(`Attempting to import remote dat: ${key}`);\n    const opts = {\n      key,\n      name: name || key,\n      sparse: true,\n    };\n    return this.importDat(opts);\n  }\n\n  // Does the work of importing a functional dat into the catalog\n  importDat(opts) {\n    if ('key' in opts && opts.key in this.dats) {\n      // The dat is already loaded, we shouldn't reimport it\n      console.log(`You are trying to import a dat that is already loaded: ${opts.key}`);\n      return Promise.resolve(false);\n    }\n    if (!opts.directory) {\n      opts.directory = path.format({\n        dir: this.baseDir,\n        base: (opts.name) ? opts.name : opts.key,\n      });\n    }\n    const newDat = new DatWrapper(opts, this);\n    return newDat.run()\n      .then(() => this.registerDat(newDat))\n      .then(() => importFiles(newDat))\n      .then(() => listDatContents(newDat.dat))\n      .each(entry => this.importDatEntry(newDat, entry))\n      .catch((err) => {\n        console.log(`* Something went wrong when importing ${opts.directory}`);\n        console.log(err);\n      });\n  }\n\n  // Registers dat in catalog array and in database (@todo)\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    return this.removeDatFromDb(datkey)\n      .then(() => this.clearDatEntries(datkey))\n      .then(() => this.addDatToDb(datkey, dw.name, dw.directory))\n      .finally(() => { this.dats[datkey] = dw; })\n      .catch(e => console.log(e));\n  }\n\n  addDatToDb(dat, name, dir) {\n    return this.db.insert({ dat, name, dir }).into('dats');\n  }\n\n  removeDatFromDb(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Remove all entries for a dat\n  clearDatEntries(datKey) {\n    return this.db('texts').where('dat', datKey).del();\n  }\n\n  // Adds an entry from a Dat\n  importDatEntry(dat, entry) {\n    const arr = entry.name.split(path.sep);\n    if (arr[0] === '') {\n      arr.shift();\n    }\n    if (arr.length > 2) {\n      console.log(chalk.bold('adding:'), entry.name);\n      const name = parser(arr[0]);\n      return this.db.insert({\n        dat: dat.key,\n        title_hash: '',\n        file_hash: '',\n        author: arr[0],\n        author_sort: `${name.last}, ${name.first}`,\n        title: arr[1],\n        file: arr[2],\n      }).into('texts');\n    }\n    return Promise.resolve(false);\n  }\n\n  // Returns the path to a dat\n  // This is broken until i can understand making sqlite async\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (opts.dat) {\n      return this.download(opts.dat, opts);\n    }\n    // With no dat provided, we must query for it\n    return this.getDatsWith(opts)\n      .map(row => row)\n      .each(row => this.download(row.dat, opts));\n  }\n\n  download(dat, opts) {\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title, opts.file));\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title));\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author));\n    }\n    // If no opts are provided, but a dat is then download the whole dat\n    console.log(`checking out everything from ${opts.dat}`);\n    return this.dats[dat].downloadContent();\n  }\n\n  // Gets a count of authors in the catalog\n  search(query) {\n    const s = `%${query}%`;\n    return this.db('texts')\n      .where('title', 'like', s)\n      .orWhere('author', 'like', s)\n      .orderBy('author_sort', 'title_sort');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith = false) {\n    const exp = this.db.select('author').from('texts')\n      .countDistinct('title as count');\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('author')\n      .orderBy('author_sort');\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters() {\n    return this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select()\n      .from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author) {\n    return this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author)\n      .orderBy('title');\n  }\n\n  getDatsWithAuthor(author) {\n    return this.db('texts')\n      .distinct('dat')\n      .where('author', author);\n  }\n\n  getDatsWithTitle(author, title) {\n    return this.db('texts')\n      .distinct('dat')\n      .where('author', author)\n      .where('title', title);\n  }\n\n  getDatsWithFile(author, title, file) {\n    return this.db('texts')\n      .distinct('dat')\n      .where('author', author)\n      .where('title', title)\n      .where('file', file);\n  }\n\n  getDatsWith(opts) {\n    if (opts.author && opts.title && opts.file) {\n      return this.getDatsWithFile(opts.author, opts.title, opts.file);\n    } else if (opts.author && opts.title) {\n      return this.getDatsWithTitle(opts.author, opts.title);\n    } else if (opts.author) {\n      return this.getDatsWithAuthor(opts.author);\n    } else {\n      return [];\n    }\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat = false, file = false) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    if (dat) {\n      exp.where('dat', dat);\n    }\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => opf2js(path.join(fp.dir, author, title, mfn)));\n  }\n\n}\n\nexport function createCatalog(dataDir = false) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  return catalog.initDatabase().then(() => catalog);\n}\n\nexport default Catalog;\n"]}