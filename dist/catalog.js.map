{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","dats","db","format","dir","base","multidat","isReady","publicDatabaseFuncs","forEach","fn","args","console","warn","publicMultidatFuncs","init","initDatabase","then","initMultidat","getDats","initOthers","cleanupDatRegistry","each","dw","registerDat","ingestDatContents","ingestDatCollections","importDir","name","importDat","key","importRemoteDat","forkDat","checkout","opts","reject","dat","download","scanForDownloads","Array","isArray","map","getDatsWith","row","uniq","renameDat","newPath","getDat","rename","updateDat","removeDat","deleteDir","promise","resolve","directory","pathToDat","startsWith","rimrafAsync","promisify","clearTexts","filter","log","bold","datkey","toString","on","handleDatImportEvent","handleDatSyncMetadataEvent","addDat","catch","e","listFlattenedCollections","item","ingestDatCollectedFile","file","collectionArr","importedData","collection","join","addCollectedText","author","title","listContents","ingestDatFile","downloaded","hasFile","downloadedStr","addText","author_sort","authorSort","resource","downloadFromDat","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","dbRow","datHasFile","filePath","stat","dataDir","dataDirFinal","process","cwd","get","existsSync","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport rimraf from 'rimraf'; // This will b removed soon\nimport config from './config';\n\nimport Database from './db'; // eslint-disable-line\nimport Multidat from './multidat';\n\nimport parseEntry from './utils/importers';\n// @todo: this.db.close(); should be called on shutdown\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = new Database(path.format({\n      dir: this.baseDir,\n      base: 'catalog.db',\n    }));\n    this.multidat = new Multidat(baseDir);\n    // If you ever need to see what queries are being run uncomment the following.\n    // this.db.on('query', queryData => console.log(queryData));\n    this.isReady = false;\n\n    // Now, database functions are passed on from this.db\n    // explicitly declare publicly accessible database functions\n    const publicDatabaseFuncs = [\n      'getDats',\n      'getAuthors',\n      'getAuthorLetters',\n      'getTitlesWith',\n      'search',\n      'getTitlesForAuthor',\n      'setDownloaded',\n    ];\n\n    publicDatabaseFuncs.forEach((fn) => {\n      if (typeof this.db[fn] === 'function') this[fn] = (...args) => this.db[fn](...args);\n      else console.warn(`Database function \"${fn}\" does not exist and has not been attached to Catalog object.`);\n    });\n\n    const publicMultidatFuncs = ['copyFromDatToDat'];\n\n    publicMultidatFuncs.forEach((fn) => {\n      if (typeof this.multidat[fn] === 'function') this[fn] = (...args) => this.multidat[fn](...args);\n      else console.warn(`Multidat function \"${fn}\" does not exist and has not been attached to Catalog object.`);\n    });\n  }\n\n  init() {\n    return this.initDatabase()\n      .then(() => this.initMultidat())\n      .then(() => this);\n  }\n\n  initDatabase() {\n    return this.db.init();\n  }\n\n  initMultidat() {\n    return this.multidat.init()\n      .then(() => this.getDats())\n      .then(dats => this.multidat.initOthers(dats))\n      .then(() => this.cleanupDatRegistry())\n      .then(() => this.multidat.getDats())\n      .each(dw => this.registerDat(dw))\n      .each(dw => this.ingestDatContents(dw))\n      .each(dw => this.ingestDatCollections(dw));\n  }\n\n  // Two functions for adding things into the catalog\n  // Imports a local directory as a dat into the catalog\n  importDir(dir, name = '') {\n    this.multidat.importDir(dir, name)\n      .then(dw => this.registerDat(dw))\n      .then(dw => this.ingestDatContents(dw));\n  }\n\n  // Imports a remote dat repository into the catalog\n  importDat(key, name = '') {\n    this.multidat.importRemoteDat(key, name)\n      .then(dw => this.registerDat(dw))\n      .then(dw => this.ingestDatContents(dw));\n  }\n\n  // Forks a dat (by its key) into a new, writable dat\n  forkDat(key, name = '') {\n    this.multidat.forkDat(key, name)\n      .then(dw => this.registerDat(dw))\n      .then(dw => this.ingestDatContents(dw));\n  }\n\n  // See db functions in constructor for browsing and searching the catalog.\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (!opts) {\n      console.warn('attempted to checkout without opts.');\n      return Promise.reject();\n    }\n    if (opts.dat) {\n      if (typeof opts.dat === 'string') {\n        return this.download(opts.dat, opts)\n          .then(() => this.scanForDownloads(opts, opts.dat));\n      } else if (Array.isArray(opts.dat)) {\n        return Promise.map(opts.dat, dat => this.checkout({ ...opts, dat }));\n      }\n      console.warn('dat option passed to check is not an array or a string');\n      return Promise.reject();\n    }\n    // With no dat provided, we must query for it\n    return this.db.getDatsWith(opts)\n      .map(row => row.dat)\n      .each(dat => this.download(dat, opts)) // .each() passes through the original array\n      .then(dats => this.scanForDownloads(opts, _.uniq(dats)));\n  }\n\n  // ## Dat Management, public functions\n  // Rename a dat - updates DB and dat\n  renameDat(key, name) {\n    const newPath = path.format({\n      dir: this.baseDir,\n      base: name,\n    });\n    return this.multidat.getDat(key)\n      .then(dat => dat.rename(newPath, name))\n      .then(() => this.db.updateDat(key, name, newPath));\n  }\n\n  // Delete a dat from registry.\n  // Only deletes directory if it's in the baseDir\n  removeDat(key, deleteDir = true) {\n    let promise = Promise.resolve();\n    if (deleteDir) {\n      const directory = this.multidat.pathToDat(key);\n      if (directory.startsWith(this.baseDir)) {\n        const rimrafAsync = Promise.promisify(rimraf);\n        promise = this.db.removeDat(key)\n          .then(() => this.db.clearTexts(key))\n          .then(() => rimrafAsync(directory));\n      }\n      /*\n      // @todo: fix this because it is better I think?\n      return this.multidat.pathToDat(key)\n        .then((p) => {\n          if (p.startsWith(this.baseDir)) {\n            return this.db.removeDat(key)\n              .then(() => this.db.clearTexts(key))\n              .then(() => this.multidat.deleteDat(key));\n          }\n          return this.removeDat(key, false);\n        });\n      */\n    }\n    return promise\n      .then(() => this.multidat.removeDat(key))\n      .then(() => this.db.removeDat(key))\n      .then(() => this.db.clearTexts(key));\n  }\n\n  // ### private functions\n  // Remove dats that are in the DB but haven't been found/ loaded by multidat\n  cleanupDatRegistry() {\n    return this.getDats()\n      .map(dats => dats)\n      .filter(dat => !(dat.dat in this.multidat.dats))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} from catalog (directory does not exist)`);\n        return this.removeDat(dat.dat, false);\n      })\n      .then(() => this.db.clearTexts());\n  }\n\n  // Registers dat the DB\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    // listen to events emitted from this dat wrapper\n    dw.on('import', (...args) => this.handleDatImportEvent(...args));\n    dw.on('sync metadata', (...args) => this.handleDatSyncMetadataEvent(...args));\n    return this.db.removeDat(datkey)\n      .then(() => this.db.clearTexts(datkey))\n      .then(() => this.db.addDat(datkey, dw.name, dw.directory))\n      .then(() => dw)\n      .catch(e => console.log(e));\n  }\n\n  // For a Dat, ingest its collections data (if there are any)\n  ingestDatCollections(dw) {\n    return Promise.map(dw.listFlattenedCollections(), item => this.ingestDatCollectedFile(dw, item[0], item[1])).catch();\n  }\n\n  ingestDatCollectedFile(dw, file, collectionArr, format = 'authorTitle') {\n    const importedData = parseEntry(file, format);\n    if (importedData) {\n      const collection = collectionArr.join(';;');\n      console.log(chalk.bold('collecting:'), file, collection);\n      return this.db.addCollectedText({\n        dat: dw.key,\n        author: importedData.author,\n        title: importedData.title,\n        collection,\n      });\n    }\n    return Promise.resolve(false);\n  }\n\n  // For a Dat, ingest its contents into the catalog\n  ingestDatContents(dw) {\n    return Promise.map(dw.listContents(), file => this.ingestDatFile(dw, file));\n  }\n\n  // Adds an entry from a Dat\n  async ingestDatFile(dw, file, format = 'calibre') {\n    const importedData = parseEntry(file, format);\n    if (importedData) {\n      const downloaded = await dw.hasFile(file);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, file);\n      return this.db.addText({\n        dat: dw.key,\n        author: importedData.author,\n        author_sort: importedData.authorSort,\n        title: importedData.title,\n        file: importedData.file,\n        downloaded,\n      });\n    }\n    return Promise.resolve(false);\n  }\n\n  // Downloads files within a dat\n  download(key, opts) {\n    let resource = '';\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${key}`);\n      resource = path.join(opts.author, opts.title, opts.file);\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${key}`);\n      resource = path.join(opts.author, opts.title);\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${key}`);\n      resource = path.join(opts.author);\n    } else {\n      console.log(`checking out everything from ${opts.dat}`);\n    }\n    return this.multidat.downloadFromDat(key, resource);\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the downloaded column in the texts table\n  scanForDownloads(opts, dat) {\n    return this.db.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.multidat.datHasFile(dbRow.dat, path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Event listening\n  //\n  // When a dat's metadata is synced\n  handleDatSyncMetadataEvent(dw) {\n    console.log('Metadata sync event. Ingesting contents for:', dw.name);\n    this.ingestDatContents(dw);\n  }\n\n  // When a dat imports a file\n  handleDatImportEvent(dw, filePath, stat) {\n    this.ingestDatFile(dw, filePath);\n    // console.log('Importing: ', filePath);\n  }\n}\n\nexport function createCatalog(dataDir) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  // @todo: adjust init() to not load any dats, allowing for quick db searches\n  return catalog.init();\n}\n\nexport default Catalog;\n"]}