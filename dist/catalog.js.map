{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","withinDat","query","dat","where","Array","isArray","whereIn","Catalog","constructor","baseDir","pathIsDownloaded","filePath","existsSync","join","directory","getDats","db","select","getDat","key","dats","client","connection","filename","format","dir","base","useNullAsDefault","isReady","initDatabase","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","table","string","boolean","then","catch","e","console","error","cleanupDatsRegistry","log","map","filter","each","bold","removeDatFromDb","clearDatEntries","discoverDats","name","opts","createIfMissing","sparse","importDat","importDatsFromDB","startsWith","keys","importDir","split","sep","slice","importRemoteDat","resolve","newDat","run","registerDat","importFiles","entry","importDatEntry","err","dw","datkey","toString","addDatToDb","finally","insert","into","datKey","del","arr","shift","length","downloaded","downloadedStr","title_hash","file_hash","author","author_sort","last","first","title","file","pathToDat","from","checkout","warn","reject","download","scanForDownloads","getDatsWith","row","unique","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","downloadContent","dbRow","update","search","s","exp","orWhere","orderBy","getAuthors","startingWith","countDistinct","groupBy","getAuthorLetters","column","raw","distinct","getTitlesForAuthor","getFiles","getOpf","mfn","fp","dataDir","dataDirFinal","process","cwd","get","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport db from 'knex';\nimport parser from 'another-name-parser';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport config from './config';\n\nimport DatWrapper, { listDatContents } from './dat'; // this function can be made a method of dat class too.\nimport { opf2js } from './opf';\nimport { getDirectories, notADir } from './utils/filesystem';\n// @todo: this.db.close(); should be called on shutdown\n\nfunction withinDat(query, dat) {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where('dat', dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn('dat', dat);\n    }\n  }\n  return query;\n}\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename: path.format({\n          dir: this.baseDir,\n          base: 'catalog.db',\n        }),\n      },\n      useNullAsDefault: true,\n    });\n    this.isReady = false;\n  }\n\n  initDatabase() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('dats')\n      .dropTableIfExists('texts')\n      .dropTableIfExists('more_authors');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n\n  // Every imported and added dat gets added to the `dats` table of the database. If\n  // the directories are deleted then these db entries are useless and should be removed.\n  // This will simply confirm that every dat directory in the db still exists.\n  cleanupDatsRegistry() {\n    console.log('Cleaning up the dats registry');\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} (directory does not exist)`);\n        return this.removeDatFromDb(dat.dat)\n          .then(() => this.clearDatEntries(dat.dat));\n      })\n      .then(() => this);\n  }\n\n  // Look inside the base directory for any directories that seem to be dats\n  discoverDats() {\n    return getDirectories(this.baseDir)\n      .map((name) => {\n        console.log(`Attempting to load dir: ${chalk.bold(name)} as a dat`);\n        const opts = {\n          name,\n          createIfMissing: false,\n          sparse: true,\n        };\n        return this.importDat(opts);\n      })\n      .then(() => this.cleanupDatsRegistry())\n      .then(() => this.importDatsFromDB())\n      .then(() => this);\n  }\n\n  // Imports dats listed in the dats table of the database\n  importDatsFromDB() {\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir)) // directory exists\n      .filter(dat => !dat.dir.startsWith(this.baseDir)) // not in data directory\n      .filter(dat => !(dat.key in this.dats.keys())) // not in registry\n      .each(dat => this.importDir(dat.dir, dat.name))\n      .then(() => console.log('Imported dats from DB'));\n  }\n\n  // Imports a directory on the local filesystem as a dat.\n  // This should not be called on any directories inside `dataDir`, which are loaded differently\n  importDir(directory, name = false) {\n    console.log(`Attempting to import local directory: ${directory}`);\n    const opts = {\n      directory,\n      name: name || directory.split(path.sep).slice(-1)[0],\n    };\n    return this.importDat(opts);\n  }\n\n  // Importing a remote dat by its key\n  importRemoteDat(key, name = false) {\n    console.log(`Attempting to import remote dat: ${key}`);\n    const opts = {\n      key,\n      name: name || key,\n      sparse: true,\n    };\n    return this.importDat(opts);\n  }\n\n  // Does the work of importing a functional dat into the catalog\n  importDat(opts) {\n    if ('key' in opts && opts.key in this.dats) {\n      // The dat is already loaded, we shouldn't reimport it\n      console.log(`You are trying to import a dat that is already loaded: ${opts.key}`);\n      return Promise.resolve(false);\n    }\n    if (!opts.directory) {\n      opts.directory = path.format({\n        dir: this.baseDir,\n        base: (opts.name) ? opts.name : opts.key,\n      });\n    }\n    const newDat = new DatWrapper(opts, this);\n    return newDat.run()\n      .then(() => this.registerDat(newDat))\n      .then(() => newDat.importFiles())\n      .then(() => listDatContents(newDat.dat)) // this function can be made a method of dat class too.\n      .each(entry => this.importDatEntry(newDat, entry))\n      .catch((err) => {\n        console.log(`* Something went wrong when importing ${opts.directory}`);\n        console.log(err);\n      });\n  }\n\n  // Registers dat in catalog array and in database (@todo)\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    return this.removeDatFromDb(datkey)\n      .then(() => this.clearDatEntries(datkey))\n      .then(() => this.addDatToDb(datkey, dw.name, dw.directory))\n      .finally(() => { this.dats[datkey] = dw; })\n      .catch(e => console.log(e));\n  }\n\n  addDatToDb(dat, name, dir) {\n    return this.db.insert({ dat, name, dir }).into('dats');\n  }\n\n  removeDatFromDb(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Remove all entries for a dat\n  clearDatEntries(datKey) {\n    return this.db('texts').where('dat', datKey).del();\n  }\n\n  // Adds an entry from a Dat\n  importDatEntry(dat, entry) {\n    const arr = entry.name.split(path.sep);\n    if (arr[0] === '') {\n      arr.shift();\n    }\n    if (arr.length > 2) {\n      const downloaded = this.pathIsDownloaded(dat, entry.name);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, entry.name);\n      const name = parser(arr[0]);\n      return this.db.insert({\n        dat: dat.key,\n        title_hash: '',\n        file_hash: '',\n        author: arr[0],\n        author_sort: `${name.last}, ${name.first}`,\n        title: arr[1],\n        file: arr[2],\n        downloaded,\n      }).into('texts');\n    }\n    return Promise.resolve(false);\n  }\n\n  // Returns the path to a dat\n  // This is broken until i can understand making sqlite async\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (!opts) {\n      console.warn('attempted to checkout without opts.');\n      return Promise.reject();\n    }\n    if (opts.dat) {\n      if (typeof opts.dat === 'string') {\n        return this.download(opts.dat, opts)\n          .then(() => this.scanForDownloads(opts, opts.dat));\n      } else if (Array.isArray(opts.dat)) {\n        return Promise.map(opts.dat, dat => this.checkout({ ...opts, dat }));\n      }\n      console.warn('dat option passed to check is not an array or a string');\n      return Promise.reject();\n    }\n    // With no dat provided, we must query for it\n    return this.getDatsWith(opts)\n      .map(row => row.dat)\n      .each(dat => this.download(dat, opts)) // .each() passes through the original array\n      .then(dats => this.scanForDownloads(opts, _.unique(dats)));\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the downloaded column in the texts table\n  scanForDownloads(opts, dat) {\n    return this.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  download(dat, opts) {\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title, opts.file));\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title));\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author));\n    }\n    // If no opts are provided, but a dat is then download the whole dat\n    console.log(`checking out everything from ${opts.dat}`);\n    return this.dats[dat].downloadContent();\n  }\n\n  // Synchronous\n  pathIsDownloaded = (dat, filePath) => fs.existsSync(path.join(dat.directory, filePath));\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.pathIsDownloaded(\n      this.dats[dbRow.dat],\n      path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Gets a count of authors in the catalog\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db('texts')\n      .where(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      });\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title_sort');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, dat) {\n    const exp = this.db.select('author').from('texts')\n      .countDistinct('title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('author')\n      .orderBy('author_sort');\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    return exp.from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author);\n    withinDat(exp, dat);\n    return exp.orderBy('title');\n  }\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('file', opts.file);\n    }\n    withinDat(exp, dat);\n    return exp.orderBy('dat', 'author', 'title');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => opf2js(path.join(fp.dir, author, title, mfn)));\n  }\n\n}\n\nexport function createCatalog(dataDir) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  return catalog.initDatabase().then(() => catalog);\n}\n\nexport default Catalog;\n"]}