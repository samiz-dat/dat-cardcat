{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","dats","db","format","dir","base","multidat","isReady","publicDatabaseFuncs","forEach","fn","args","publicMultidatFuncs","init","initDatabase","then","initMultidat","getDats","initOthers","cleanupDatRegistry","each","dw","registerDat","ingestDatContents","importDir","name","importDat","key","importRemoteDat","checkout","opts","console","warn","reject","dat","download","scanForDownloads","Array","isArray","map","getDatsWith","row","uniq","renameDat","newPath","getDat","rename","updateDat","removeDat","deleteDir","pathToDat","p","startsWith","rimrafAsync","promisify","clearTexts","filter","log","bold","datkey","toString","on","handleDatImportEvent","handleDatSyncMetadataEvent","addDat","directory","catch","e","listContents","file","ingestDatFile","importedData","downloaded","hasFile","downloadedStr","addText","author","author_sort","authorSort","title","resolve","resource","join","downloadFromDat","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","dbRow","datHasFile","filePath","stat","dataDir","dataDirFinal","process","cwd","get","existsSync","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport rimraf from 'rimraf';\nimport config from './config';\n\nimport Database from './db'; // eslint-disable-line\nimport Multidat from './multidat';\n\nimport parseEntry from './utils/importers';\n// @todo: this.db.close(); should be called on shutdown\n\n/**\n  There is an array of (loaded) dats\n  There is a list of dats in the database\n */\n\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = new Database(path.format({\n      dir: this.baseDir,\n      base: 'catalog.db',\n    }));\n    this.multidat = new Multidat(baseDir);\n    // If you ever need to see what queries are being run uncomment the following.\n    // this.db.on('query', queryData => console.log(queryData));\n    this.isReady = false;\n\n    // Now, database functions are passed on from this.db\n    // explicitly declare publicly accessible database functions\n    const publicDatabaseFuncs = ['getDats', 'getAuthors', 'getAuthorLetters', 'getTitlesWith', 'search', 'getTitlesForAuthor', 'setDownloaded'];\n    publicDatabaseFuncs.forEach((fn) => {\n      if (typeof this.db[fn] === 'function') this[fn] = (...args) => this.db[fn](...args);\n    });\n    const publicMultidatFuncs = ['copyFromDatToDat'];\n    publicMultidatFuncs.forEach((fn) => {\n      if (typeof this.multidat[fn] === 'function') this[fn] = (...args) => this.multidat[fn](...args);\n    });\n  }\n\n  init() {\n    return this.initDatabase()\n      .then(() => this.initMultidat())\n      .then(() => this);\n  }\n\n  initDatabase() {\n    return this.db.init();\n  }\n\n  initMultidat() {\n    return this.multidat.init()\n      .then(() => this.getDats())\n      .then(dats => this.multidat.initOthers(dats))\n      .then(() => this.cleanupDatRegistry())\n      .then(() => this.multidat.getDats())\n      .each(dw => this.registerDat(dw))\n      .each(dw => this.ingestDatContents(dw));\n  }\n\n  // Two functions for adding things into the catalog\n  // Imports a local directory as a dat into the catalog\n  importDir(dir, name = '') {\n    this.multidat.importDir(dir, name)\n      .then(dw => this.registerDat(dw))\n      .then(dw => this.ingestDatContents(dw));\n  }\n\n  // Imports a remote dat repository into the catalog\n  importDat(key, name = '') {\n    this.multidat.importRemoteDat(key, name)\n      .then(dw => this.registerDat(dw))\n      .then(dw => this.ingestDatContents(dw));\n  }\n\n  // See db functions in constructor for browsing and searching the catalog.\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (!opts) {\n      console.warn('attempted to checkout without opts.');\n      return Promise.reject();\n    }\n    if (opts.dat) {\n      if (typeof opts.dat === 'string') {\n        return this.download(opts.dat, opts)\n          .then(() => this.scanForDownloads(opts, opts.dat));\n      } else if (Array.isArray(opts.dat)) {\n        return Promise.map(opts.dat, dat => this.checkout({ ...opts, dat }));\n      }\n      console.warn('dat option passed to check is not an array or a string');\n      return Promise.reject();\n    }\n    // With no dat provided, we must query for it\n    return this.db.getDatsWith(opts)\n      .map(row => row.dat)\n      .each(dat => this.download(dat, opts)) // .each() passes through the original array\n      .then(dats => this.scanForDownloads(opts, _.uniq(dats)));\n  }\n\n  // ## Dat Management, public functions\n  // Rename a dat - updates DB and dat\n  renameDat(key, name) {\n    const newPath = path.format({\n      dir: this.baseDir,\n      base: name,\n    });\n    return this.multidat.getDat(key)\n      .then(dat => dat.rename(newPath, name))\n      .then(() => this.db.updateDat(key, name, newPath));\n  }\n\n  // Delete a dat from registry.\n  // Only deletes directory if it's in the baseDir\n  removeDat(key, deleteDir = true) {\n    if (deleteDir) {\n      return this.multidat.pathToDat(key)\n        .then((p) => {\n          if (p.startsWith(this.baseDir)) {\n            const rimrafAsync = Promise.promisify(rimraf);\n            return this.multidat.removeDat(key)\n              .then(() => this.db.removeDat(key))\n              .then(() => this.db.clearTexts(key))\n              .then(() => rimrafAsync(p));\n          }\n          return this.removeDat(key, false);\n        });\n    }\n    return this.multidat.removeDat(key)\n      .then(() => this.db.removeDat(key))\n      .then(() => this.db.clearTexts(key));\n  }\n\n  // ### private functions\n  // Remove dats that are in the DB but haven't been found/ loaded by multidat\n  cleanupDatRegistry() {\n    return this.getDats()\n      .map(dats => dats)\n      .filter(dat => !(dat.dat in this.multidat.dats))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} from catalog (directory does not exist)`);\n        return this.removeDat(dat.dat, false);\n      })\n      .then(() => this.db.clearTexts());\n  }\n\n  // Registers dat the DB\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    // listen to events emitted from this dat wrapper\n    dw.on('import', (...args) => this.handleDatImportEvent(...args));\n    dw.on('sync metadata', (...args) => this.handleDatSyncMetadataEvent(...args));\n    return this.db.removeDat(datkey)\n      .then(() => this.db.clearTexts(datkey))\n      .then(() => this.db.addDat(datkey, dw.name, dw.directory))\n      .then(() => dw)\n      .catch(e => console.log(e));\n  }\n\n  // For a Dat, ingest its contents into the catalog\n  ingestDatContents(dw) {\n    return Promise.map(dw.listContents(), file => this.ingestDatFile(dw, file));\n  }\n\n  // Adds an entry from a Dat\n  async ingestDatFile(dw, file, format = 'calibre') {\n    const importedData = parseEntry(file, format);\n    if (importedData) {\n      const downloaded = await dw.hasFile(file);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, file);\n      return this.db.addText({\n        dat: dw.key,\n        author: importedData.author,\n        author_sort: importedData.authorSort,\n        title: importedData.title,\n        file: importedData.file,\n        downloaded,\n      });\n    }\n    return Promise.resolve(false);\n  }\n\n  // Downloads files within a dat\n  download(key, opts) {\n    let resource = '';\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${key}`);\n      resource = path.join(opts.author, opts.title, opts.file);\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${key}`);\n      resource = path.join(opts.author, opts.title);\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${key}`);\n      resource = path.join(opts.author);\n    } else {\n      console.log(`checking out everything from ${opts.dat}`);\n    }\n    return this.multidat.downloadFromDat(key, resource);\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the downloaded column in the texts table\n  scanForDownloads(opts, dat) {\n    return this.db.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.multidat.datHasFile(dbRow.dat, path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Event listening\n  //\n  // When a dat's metadata is synced\n  handleDatSyncMetadataEvent(dw) {\n    console.log('Metadata sync event. Ingesting contents for:', dw.name);\n    this.ingestDatContents(dw);\n  }\n\n  // When a dat imports a file\n  handleDatImportEvent(dw, filePath, stat) {\n    this.ingestDatFile(dw, filePath);\n    // console.log('Importing: ', filePath);\n  }\n}\n\nexport function createCatalog(dataDir) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  // @todo: adjust init() to not load any dats, allowing for quick db searches\n  return catalog.init();\n}\n\nexport default Catalog;\n"]}