{"version":3,"sources":["../src/catalog.js"],"names":["createCatalog","Catalog","constructor","baseDir","getDats","db","getAuthors","args","getAuthorLetters","getTitlesWith","search","pathIsDownloaded","dat","filePath","existsSync","join","directory","dats","format","dir","base","isReady","initDatabase","init","cleanupDatsRegistry","console","log","map","filter","each","bold","removeDat","then","clearTexts","discoverDats","name","opts","createIfMissing","sparse","importDat","importDatsFromDB","startsWith","key","keys","importDir","split","sep","slice","importRemoteDat","resolve","newDat","on","handleDatImportEvent","run","registerDat","importFiles","listContents","file","importDatFile","catch","err","dw","datkey","toString","addDat","finally","e","importedData","downloaded","downloadedStr","addText","author","author_sort","authorSort","title","checkout","warn","reject","download","scanForDownloads","Array","isArray","getDatsWith","row","uniq","getItemsWith","rows","doc","itemIsDownloaded","setDownloaded","downloadContent","dbRow","path","stat","dataDir","dataDirFinal","process","cwd","get","mkdirSync","catalog"],"mappings":"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","file":"catalog.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport Promise from 'bluebird';\nimport chalk from 'chalk';\nimport _ from 'lodash';\nimport config from './config';\n\nimport DatWrapper from './dat'; // this function can be made a method of dat class too.\nimport Database from './db';\n// import { opf2js } from './opf';\nimport { getDirectories, notADir } from './utils/filesystem';\nimport parseEntry from './utils/importers';\n// @todo: this.db.close(); should be called on shutdown\n\n// Class definition\nexport class Catalog {\n  constructor(baseDir) {\n    this.baseDir = baseDir;\n    this.dats = [];\n    this.db = new Database(path.format({\n      dir: this.baseDir,\n      base: 'catalog.db',\n    }));\n    // If you ever need to see what queries are being run uncomment the following.\n    // this.db.on('query', queryData => console.log(queryData));\n    this.isReady = false;\n  }\n\n  initDatabase() {\n    return this.db.init();\n  }\n\n  // Every imported and added dat gets added to the `dats` table of the database. If\n  // the directories are deleted then these db entries are useless and should be removed.\n  // This will simply confirm that every dat directory in the db still exists.\n  cleanupDatsRegistry() {\n    console.log('Cleaning up the dats registry');\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir))\n      .each((dat) => {\n        console.log(`Removing: ${chalk.bold(dat.dir)} (directory does not exist)`);\n        return this.db.removeDat(dat.dat)\n          .then(() => this.db.clearTexts(dat.dat));\n      })\n      .then(() => this);\n  }\n\n  // Look inside the base directory for any directories that seem to be dats\n  discoverDats() {\n    return getDirectories(this.baseDir)\n      .map((name) => {\n        console.log(`Attempting to load dir: ${chalk.bold(name)} as a dat`);\n        const opts = {\n          name,\n          createIfMissing: false,\n          sparse: true,\n        };\n        return this.importDat(opts);\n      })\n      .then(() => this.cleanupDatsRegistry())\n      .then(() => this.importDatsFromDB())\n      .then(() => this);\n  }\n\n  // Imports dats listed in the dats table of the database\n  importDatsFromDB() {\n    return this.getDats()\n      .map(dat => dat)\n      .filter(dat => notADir(dat.dir)) // directory exists\n      .filter(dat => !dat.dir.startsWith(this.baseDir)) // not in data directory\n      .filter(dat => !(dat.key in this.dats.keys())) // not in registry\n      .each(dat => this.importDir(dat.dir, dat.name))\n      .then(() => console.log('Imported dats from DB'));\n  }\n\n  // Imports a directory on the local filesystem as a dat.\n  // This should not be called on any directories inside `dataDir`, which are loaded differently\n  importDir(directory, name = false) {\n    console.log(`Attempting to import local directory: ${directory}`);\n    const opts = {\n      directory,\n      name: name || directory.split(path.sep).slice(-1)[0],\n    };\n    return this.importDat(opts);\n  }\n\n  // Importing a remote dat by its key\n  importRemoteDat(key, name = false) {\n    console.log(`Attempting to import remote dat: ${key}`);\n    const opts = {\n      key,\n      name: name || key,\n      sparse: true,\n    };\n    return this.importDat(opts);\n  }\n\n  // Does the work of importing a functional dat into the catalog\n  importDat(opts) {\n    if ('key' in opts && opts.key in this.dats) {\n      // The dat is already loaded, we shouldn't reimport it\n      console.log(`You are trying to import a dat that is already loaded: ${opts.key}`);\n      return Promise.resolve(false);\n    }\n    if (!opts.directory) {\n      opts.directory = path.format({\n        dir: this.baseDir,\n        base: (opts.name) ? opts.name : opts.key,\n      });\n    }\n    const newDat = new DatWrapper(opts, this);\n    // listen to events emitted from this dat wrapper\n    newDat.on('import', (...args) => this.handleDatImportEvent(...args));\n    // dw.on('download', (...args) => this.handleDatDownloadEvent(...args));\n    return newDat.run()\n      .then(() => this.registerDat(newDat))\n      .then(() => newDat.importFiles())\n      .then(() => newDat.listContents())\n      .each(file => this.importDatFile(newDat, file))\n      .catch((err) => {\n        console.log(`* Something went wrong when importing ${opts.directory}`);\n        console.log(err);\n      });\n  }\n\n  // Registers dat in catalog array and in database (@todo)\n  registerDat(dw) {\n    const datkey = dw.dat.key.toString('hex');\n    console.log(`Adding dat (${datkey}) to the catalog.`);\n    return this.db.removeDat(datkey)\n      .then(() => this.db.clearTexts(datkey))\n      .then(() => this.db.addDat(datkey, dw.name, dw.directory))\n      .finally(() => { this.dats[datkey] = dw; })\n      .catch(e => console.log(e));\n  }\n\n  // Now, database functions are passed on from this.db\n  // It kind of amounts to a data API\n  getDats = () => this.db.getDats();\n  getAuthors = (...args) => this.db.getAuthors(...args);\n  getAuthorLetters = (...args) => this.db.getAuthorLetters(...args);\n  getTitlesWith = (...args) => this.db.getTitlesWith(...args);\n  search = (...args) => this.db.search(...args);\n\n  // Adds an entry from a Dat\n  importDatFile(dat, file, format = 'calibre') {\n    const importedData = parseEntry(file, format);\n    if (importedData) {\n      const downloaded = this.pathIsDownloaded(dat, file);\n      const downloadedStr = (downloaded) ? '[*]' : '[ ]';\n      console.log(chalk.bold('adding:'), downloadedStr, file);\n      return this.db.addText({\n        dat: dat.key,\n        author: importedData.author,\n        author_sort: importedData.authorSort,\n        title: importedData.title,\n        file: importedData.file,\n        downloaded,\n      });\n    }\n    return Promise.resolve(false);\n  }\n\n  // Public call for syncing files within a dat\n  // opts can include {dat:, author: , title:, file: }\n  checkout(opts) {\n    if (!opts) {\n      console.warn('attempted to checkout without opts.');\n      return Promise.reject();\n    }\n    if (opts.dat) {\n      if (typeof opts.dat === 'string') {\n        return this.download(opts.dat, opts)\n          .then(() => this.scanForDownloads(opts, opts.dat));\n      } else if (Array.isArray(opts.dat)) {\n        return Promise.map(opts.dat, dat => this.checkout({ ...opts, dat }));\n      }\n      console.warn('dat option passed to check is not an array or a string');\n      return Promise.reject();\n    }\n    // With no dat provided, we must query for it\n    return this.db.getDatsWith(opts)\n      .map(row => row.dat)\n      .each(dat => this.download(dat, opts)) // .each() passes through the original array\n      .then(dats => this.scanForDownloads(opts, _.uniq(dats)));\n  }\n\n  // Checks whether a group of catalogue items have been downloaded\n  // and if so, then updates the downloaded column in the texts table\n  scanForDownloads(opts, dat) {\n    return this.db.getItemsWith(opts, dat)\n      .then(rows => rows.filter(doc => this.itemIsDownloaded(doc)))\n      .each(row => this.setDownloaded(row.dat, row.author, row.title, row.file));\n  }\n\n  download(dat, opts) {\n    if (opts.author && opts.title && opts.file) {\n      console.log(`checking out ${opts.author}/${opts.title}/${opts.file} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title, opts.file));\n    } else if (opts.author && opts.title) {\n      console.log(`checking out ${opts.author}/${opts.title} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author, opts.title));\n    } else if (opts.author) {\n      console.log(`checking out ${opts.author} from ${dat}`);\n      return this.dats[dat].downloadContent(path.join(opts.author));\n    }\n    // If no opts are provided, but a dat is then download the whole dat\n    console.log(`checking out everything from ${opts.dat}`);\n    return this.dats[dat].downloadContent();\n  }\n\n  // Synchronous\n  pathIsDownloaded = (dat, filePath) => fs.existsSync(path.join(dat.directory, filePath));\n\n  // Given a row from the texts table, check if it has been downloaded\n  itemIsDownloaded(dbRow) {\n    return this.pathIsDownloaded(\n      this.dats[dbRow.dat],\n      path.join(dbRow.author, dbRow.title, dbRow.file));\n  }\n\n  // Event listening\n  //\n  // When a dat imports a file\n  handleDatImportEvent(dw, path, stat) {\n    // console.log('Importing: ', path);\n  }\n}\n\nexport function createCatalog(dataDir) {\n  // Directory to store all the data in\n  let dataDirFinal = path.join(process.cwd(), config.get('dataDir'));\n  dataDirFinal = dataDir || dataDirFinal;\n\n  // Create data directory if it doesn't exist yet\n  if (!fs.existsSync(dataDirFinal)) {\n    fs.mkdirSync(dataDirFinal);\n  }\n\n  const catalog = new Catalog(dataDirFinal);\n  return catalog.initDatabase().then(() => catalog);\n}\n\nexport default Catalog;\n"]}