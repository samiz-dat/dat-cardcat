{"version":3,"sources":["../src/db.js"],"names":["withinDat","query","dat","table","where","Array","isArray","whereIn","withinColl","coll","length","collCond","innerJoin","on","s","Database","constructor","filename","getDats","db","select","getDat","key","client","connection","useNullAsDefault","addDat","name","dir","version","insert","into","removeDat","datKey","del","updateDat","update","clearTexts","clearCollections","collection","pathToDat","from","first","lastImportedVersion","max","whereNotNull","addTextFromMetadata","opts","author","title","file","then","row","promise","state","title_hash","file_hash","author_sort","downloaded","text_id","resolve","addCollectedText","setDownloaded","search","exp","raw","andWhere","orWhere","groupBy","orderBy","getAuthors","startingWith","countDistinct","getCollectionAuthors","q","getAuthorLetters","column","distinct","getTitlesForAuthor","getTitlesWith","getItemsWith","getCollections","count","getFiles","getDatsWith","getOpf","mfn","fp","join","init","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","string","integer","increments","boolean","isReady","catch","e","console","error"],"mappings":"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","file":"db.js","sourcesContent":["import path from 'path';\nimport db from 'knex';\nimport Promise from 'bluebird';\nimport { readOPF } from 'open-packaging-format';\n\n// Narrows query to within a dat/ list of dats\nfunction withinDat(query, dat, table = 'texts') {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where(`${table}.dat`, dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn(`${table}.dat`, dat);\n    }\n  }\n  return query;\n}\n\n// Narrows query to within a collection/ list of collections\n// Note: it is assumed that it is being joined to the `texts` table\nfunction withinColl(query, coll) {\n  if (Array.isArray(coll) && coll.length === 0) {\n    return query;\n  }\n  let collCond = coll;\n  if (Array.isArray(coll) && coll.length === 1) {\n    collCond = coll[0];\n  }\n  query.innerJoin('collections', function() {\n    this\n      .on('texts.dat', 'collections.dat')\n      .on('texts.author', 'collections.author')\n      .on('texts.title', 'collections.title');\n  });\n  if (typeof collCond === 'string') {\n    const s = `${collCond}%`;\n    query.where('collections.collection', 'like', s);\n  } else if (Array.isArray(collCond)) {\n    query.whereIn('collections.collection', collCond);\n  }\n  return query;\n}\n\n//\nexport class Database {\n  // Constructor\n  constructor(filename) {\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename,\n      },\n      useNullAsDefault: true,\n    });\n    // If you ever need to see what queries are being run uncomment the following.\n    // this.db.on('query', queryData => console.log(queryData));\n  }\n\n  // Add a dat to the database\n  addDat(dat, name, dir, version) {\n    return this.db.insert({ dat, name, dir, version }).into('dats');\n  }\n\n  // Remove a dat from the database\n  removeDat(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Update a dat's name and directory\n  updateDat(datKey, name, dir) {\n    return this.db('dats')\n      .where('dat', datKey)\n      .update({\n        name,\n        dir,\n      });\n  }\n\n  // Remove all entries/ texts for a dat\n  clearTexts(datKey) {\n    if (datKey) {\n      return this.db('texts').where('dat', datKey).del();\n    }\n    return this.db('texts').del();\n  }\n\n  // Remove all collection entries for a dat\n  clearCollections(datKey, collection) {\n    if (datKey) {\n      if (collection) {\n        return this.db('collections')\n        .where({\n          dat: datKey,\n          collection,\n        }).del();\n      }\n      return this.db('collections').where('dat', datKey).del();\n    }\n    return this.db('collections').del();\n  }\n\n  // Returns the path to a dat as found in db.\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  lastImportedVersion(datKey) {\n    return this.db('texts')\n      .max('version as version')\n      .where('dat', datKey)\n      .whereNotNull('version')\n      .first();\n  }\n\n  addTextFromMetadata(opts) {\n    return this.db('texts')\n      .where({\n        dat: opts.dat,\n        author: opts.author,\n        title: opts.title,\n        file: opts.file,\n      })\n      .first()\n      .then((row) => {\n        let promise = -1;\n        // console.log(opts.version, 'version!');\n        if (!row) {\n          // add new text\n          promise = this.db('texts').insert({\n            dat: opts.dat,\n            version: opts.version,\n            state: opts.state,\n            title_hash: opts.title_hash || '',\n            file_hash: opts.file_hash || '',\n            author: opts.author,\n            author_sort: opts.author_sort,\n            title: opts.title,\n            file: opts.file,\n            downloaded: opts.downloaded || 0,\n          });\n        } else if (opts.version > row.version) {\n          // update state and version if this text is newer version\n          promise = this.db('texts').update({\n            version: opts.version,\n            state: opts.state, // state stored del or pul status as a bool\n          }).where('text_id', row.text_id);\n        }\n        return Promise.resolve(promise);\n      });\n  }\n\n  // Inserts a row for a collected text\n  addCollectedText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      author: opts.author,\n      title: opts.title,\n      collection: opts.collection,\n    }).into('collections');\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Searches for titles with files bundled up in a comma separated column\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts')\n      .where('state', true)\n      .andWhere(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      })\n      .groupBy('author', 'title');\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, opts = {}, dat) {\n    const exp = this.db.select('texts.author').from('texts')\n      .countDistinct('texts.title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('texts.author_sort', 'like', s);\n    }\n    if (opts.collection) {\n      withinColl(exp, opts.collection);\n    }\n    return exp\n      .where('texts.state', true)\n      .groupBy('texts.author')\n      .orderBy('texts.author_sort');\n  }\n\n  // Gets authors within a collection\n  getCollectionAuthors(collection, startingWith, dat) {\n    const q = this.getAuthors(startingWith, dat);\n    q.countDistinct('collections.title as count'); // count inside the collection instead\n    const s = `${collection}%`;\n    return q.innerJoin('collections', 'texts.author', 'collections.author')\n      .where('collections.collection', 'like', s)\n      .andWhere('texts.state', true);\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(opts, dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    if (opts.collection) {\n      withinColl(exp, opts.collection);\n    }\n    return exp.from('texts')\n      .where('texts.state', true)\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, opts, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author)\n      .andWhere('texts.state', true);\n    withinDat(exp, dat);\n    if (opts.collection) {\n      withinColl(exp, opts.collection);\n    }\n    return exp.orderBy('title');\n  }\n\n  // Like getItemsWith, except some extra work is done to return titles\n  // along with a comma-separated list of files:downloaded for each title.\n  getTitlesWith(opts, dat) {\n    const exp = this.db\n      .select('texts.dat',\n        'texts.author',\n        'texts.title',\n        'texts.title_hash',\n        'texts.author_sort',\n      this.db.raw('GROUP_CONCAT(\"texts.file\" || \":\" || \"texts.downloaded\") as \"files\"'))\n      .from('texts')\n      .where('texts.state', true);\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.collection) {\n      withinColl(exp, opts.collection);\n    }\n    withinDat(exp, dat);\n    return exp\n      .groupBy('texts.author', 'texts.title')\n      .orderBy('texts.author_sort', 'texts.title');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('texts.file', opts.file);\n    }\n    if (opts.collection) {\n      withinColl(exp, opts.collection);\n    }\n    withinDat(exp, dat || opts.dat);\n    return exp\n      .where('texts.state', true)\n      .orderBy('texts.dat', 'texts.author', 'texts.title');\n  }\n\n  // Gets a list of collections in the catalog\n  getCollections(startingWith, dat) {\n    const exp = this.db.select('collection').from('collections')\n      .count('* as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('collection', 'like', s);\n    }\n    return exp\n      .groupBy('collection')\n      .orderBy('collection');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .andWhere('title', title)\n      .andWhere('texts.state', true);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => readOPF(path.join(fp.dir, author, title, mfn)));\n  }\n\n  // Initializes tables\n  init() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('datsX')\n      .dropTableIfExists('textsX')\n      .dropTableIfExists('more_authorsX');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      table.integer('version'); // this will need to be updated whenever files are imported\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.increments('text_id');\n      table.string('dat');\n      table.integer('version');\n      table.boolean('state'); // is valid\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('collections', (table) => {\n      table.string('dat');\n      table.string('author');\n      table.string('title');\n      table.string('collection');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n}\n\nexport default Database;\n"]}