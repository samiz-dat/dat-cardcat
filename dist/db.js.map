{"version":3,"sources":["../src/db.js"],"names":["withinDat","query","dat","table","where","Array","isArray","whereIn","Database","constructor","filename","getDats","db","select","getDat","key","client","connection","useNullAsDefault","addDat","name","dir","version","insert","into","removeDat","datKey","del","updateDat","update","clearTexts","clearCollections","pathToDat","from","first","addText","opts","title_hash","file_hash","author","author_sort","title","file","downloaded","addCollectedText","collection","setDownloaded","search","s","exp","raw","orWhere","groupBy","orderBy","getAuthors","startingWith","countDistinct","getCollectionAuthors","q","innerJoin","getAuthorLetters","column","distinct","getTitlesForAuthor","getTitlesWith","on","getItemsWith","getCollections","count","getFiles","getDatsWith","getOpf","mfn","then","row","fp","join","init","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","string","integer","boolean","isReady","catch","e","console","error"],"mappings":"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","file":"db.js","sourcesContent":["import path from 'path';\nimport db from 'knex';\nimport { readOPF } from 'open-packaging-format';\n\n// Narrows query to within a dat/ list of dats\nfunction withinDat(query, dat, table = 'texts') {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where(`${table}.dat`, dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn(`${table}.dat`, dat);\n    }\n  }\n  return query;\n}\n\nexport class Database {\n  // Constructor\n  constructor(filename) {\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename,\n      },\n      useNullAsDefault: true,\n    });\n  }\n\n  // Add a dat to the database\n  addDat(dat, name, dir, version) {\n    return this.db.insert({ dat, name, dir, version }).into('dats');\n  }\n\n  // Remove a dat from the database\n  removeDat(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Update a dat's name and directory\n  updateDat(datKey, name, dir) {\n    return this.db('dats')\n      .where('dat', datKey)\n      .update({\n        name,\n        dir,\n      });\n  }\n\n  // Remove all entries/ texts for a dat\n  clearTexts(datKey) {\n    if (datKey) {\n      return this.db('texts').where('dat', datKey).del();\n    }\n    return this.db('texts').del();\n  }\n\n  // Remove all collection entries for a dat\n  clearCollections(datKey) {\n    if (datKey) {\n      return this.db('collections').where('dat', datKey).del();\n    }\n    return this.db('collections').del();\n  }\n\n  // Returns the path to a dat as found in db.\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Insert a text into the texts table\n  addText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      title_hash: opts.title_hash || '',\n      file_hash: opts.file_hash || '',\n      author: opts.author,\n      author_sort: opts.author_sort,\n      title: opts.title,\n      file: opts.file,\n      downloaded: opts.downloaded || 0,\n    }).into('texts');\n  }\n\n  // Inserts a row for a collected text\n  addCollectedText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      author: opts.author,\n      title: opts.title,\n      collection: opts.collection,\n    }).into('collections');\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Searches for titles with files bundled up in a comma separated column\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts')\n      .where(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      })\n      .groupBy('author', 'title');\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, dat) {\n    const exp = this.db.select('texts.author').from('texts')\n      .countDistinct('texts.title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('texts.author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('texts.author')\n      .orderBy('texts.author_sort');\n  }\n\n  // Gets authors within a collection\n  getCollectionAuthors(collection, startingWith, dat) {\n    const q = this.getAuthors(startingWith, dat);\n    q.countDistinct('collections.title as count'); // count inside the collection instead\n    const s = `${collection}%`;\n    return q.innerJoin('collections', 'texts.author', 'collections.author')\n      .where('collections.collection', 'like', s);\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    return exp.from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author);\n    withinDat(exp, dat);\n    return exp.orderBy('title');\n  }\n\n  // Like getItemsWith, except some extra work is done to return titles\n  // along with a comma-separated list of files:downloaded for each title.\n  getTitlesWith(opts, dat) {\n    const exp = this.db\n      .select('texts.dat',\n        'texts.author',\n        'texts.title',\n        'texts.title_hash',\n        'texts.author_sort',\n      this.db.raw('GROUP_CONCAT(\"texts.file\" || \":\" || \"texts.downloaded\") as \"files\"'))\n      .from('texts');\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat);\n    return exp\n      .groupBy('texts.author', 'texts.title')\n      .orderBy('texts.author_sort', 'texts.title');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('texts.file', opts.file);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat || opts.dat);\n    return exp.orderBy('texts.dat', 'texts.author', 'texts.title');\n  }\n\n  // Gets a list of collections in the catalog\n  getCollections(startingWith, dat) {\n    const exp = this.db.select('collection').from('collections')\n      .count('* as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('collection', 'like', s);\n    }\n    return exp\n      .groupBy('collection')\n      .orderBy('collection');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => readOPF(path.join(fp.dir, author, title, mfn)));\n  }\n\n  // Initializes tables\n  init() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('datsX')\n      .dropTableIfExists('textsX')\n      .dropTableIfExists('more_authorsX');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      table.integer('version');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('collections', (table) => {\n      table.string('dat');\n      table.string('author');\n      table.string('title');\n      table.string('collection');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n}\n\nexport default Database;\n"]}