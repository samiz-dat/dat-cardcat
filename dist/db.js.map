{"version":3,"sources":["../src/db.js"],"names":["withinDat","query","dat","table","where","Array","isArray","whereIn","Database","constructor","filename","getDats","db","select","getDat","key","client","connection","useNullAsDefault","transact","queries","console","log","length","resolve","doTransaction","q","raw","then","each","catch","e","addDat","name","dir","version","insert","into","removeDat","datKey","del","updateDat","update","clearTexts","clearCollections","pathToDat","from","first","lastImportedVersion","max","whereNotNull","addText","opts","p","title_hash","file_hash","author","author_sort","title","file","downloaded","transacting","transactionStatements","push","toString","addTextFromMetadata","row","promise","state","text_id","addCollectedText","collection","setDownloaded","search","s","exp","andWhere","orWhere","groupBy","orderBy","getAuthors","startingWith","countDistinct","getCollectionAuthors","innerJoin","getAuthorLetters","column","distinct","getTitlesForAuthor","getTitlesWith","AndWhere","on","getItemsWith","getCollections","count","getFiles","getDatsWith","getOpf","mfn","fp","join","init","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","string","integer","increments","boolean","isReady","error"],"mappings":"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","file":"db.js","sourcesContent":["import path from 'path';\nimport db from 'knex';\nimport Promise from 'bluebird';\nimport { readOPF } from 'open-packaging-format';\n\n// Narrows query to within a dat/ list of dats\nfunction withinDat(query, dat, table = 'texts') {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where(`${table}.dat`, dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn(`${table}.dat`, dat);\n    }\n  }\n  return query;\n}\n\nexport class Database {\n  // Constructor\n  constructor(filename) {\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename,\n      },\n      useNullAsDefault: true,\n    });\n    // If you ever need to see what queries are being run uncomment the following.\n    // this.db.on('query', queryData => console.log(queryData));\n  }\n\n  transact(queries) {\n    console.log('transact(queries)', queries.length);\n    if (queries.length === 0) {\n      return Promise.resolve(false);\n    }\n    return this.doTransaction(queries);\n  }\n\n  async doTransaction(queries) {\n    if (queries.length === 0) {\n      return Promise.resolve(false);\n    }\n    const q = await this.db.raw('BEGIN TRANSACTION')\n      .then(() => {\n        Promise.each(queries, query => this.db.raw(`${query}`));\n      })\n      .then(() => this.db.raw('COMMIT'))\n      .catch(e => console.log(e));\n    return q;\n  }\n\n  // Add a dat to the database\n  addDat(dat, name, dir, version) {\n    return this.db.insert({ dat, name, dir, version }).into('dats');\n  }\n\n  // Remove a dat from the database\n  removeDat(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Update a dat's name and directory\n  updateDat(datKey, name, dir) {\n    return this.db('dats')\n      .where('dat', datKey)\n      .update({\n        name,\n        dir,\n      });\n  }\n\n  // Remove all entries/ texts for a dat\n  clearTexts(datKey) {\n    if (datKey) {\n      return this.db('texts').where('dat', datKey).del();\n    }\n    return this.db('texts').del();\n  }\n\n  // Remove all collection entries for a dat\n  clearCollections(datKey) {\n    if (datKey) {\n      return this.db('collections').where('dat', datKey).del();\n    }\n    return this.db('collections').del();\n  }\n\n  // Returns the path to a dat as found in db.\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  lastImportedVersion(datKey) {\n    return this.db('texts')\n      .max('version as version')\n      .where('dat', datKey)\n      .whereNotNull('version')\n      .first();\n  }\n\n  // Insert a text into the texts table\n  addText(opts) {\n    const p = this.db.insert({\n      dat: opts.dat,\n      title_hash: opts.title_hash || '',\n      file_hash: opts.file_hash || '',\n      author: opts.author,\n      author_sort: opts.author_sort,\n      title: opts.title,\n      file: opts.file,\n      downloaded: opts.downloaded || 0,\n    }).into('texts');\n    if (this.transacting) {\n      this.transactionStatements.push(p.toString());\n      return Promise.resolve(true);\n    }\n    return p;\n  }\n\n  addTextFromMetadata(opts) {\n    return this.db('texts')\n      .where({\n        dat: opts.dat,\n        author: opts.author,\n        title: opts.title,\n        file: opts.file,\n      })\n      .first()\n      .then((row) => {\n        let promise = -1;\n        // console.log(opts.version, 'version!');\n        if (!row) {\n          // add new text\n          promise = this.db('texts').insert({\n            dat: opts.dat,\n            version: opts.version,\n            state: opts.state,\n            title_hash: opts.title_hash || '',\n            file_hash: opts.file_hash || '',\n            author: opts.author,\n            author_sort: opts.author_sort,\n            title: opts.title,\n            file: opts.file,\n            downloaded: opts.downloaded || 0,\n          });\n        } else if (opts.version > row.version) {\n          // update state and version if this text is newer version\n          promise = this.db('texts').update({\n            version: opts.version,\n            state: opts.state, // state stored del or pul status as a bool\n          }).where('text_id', row.text_id);\n        }\n        return Promise.resolve(promise);\n      });\n  }\n\n  // Inserts a row for a collected text\n  addCollectedText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      author: opts.author,\n      title: opts.title,\n      collection: opts.collection,\n    }).into('collections');\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Searches for titles with files bundled up in a comma separated column\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts')\n      .where('state', true)\n      .andWhere(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      })\n      .groupBy('author', 'title');\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, dat) {\n    const exp = this.db.select('texts.author').from('texts')\n      .countDistinct('texts.title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('texts.author_sort', 'like', s);\n    }\n    return exp\n      .where('texts.state', true)\n      .groupBy('texts.author')\n      .orderBy('texts.author_sort');\n  }\n\n  // Gets authors within a collection\n  getCollectionAuthors(collection, startingWith, dat) {\n    const q = this.getAuthors(startingWith, dat);\n    q.countDistinct('collections.title as count'); // count inside the collection instead\n    const s = `${collection}%`;\n    return q.innerJoin('collections', 'texts.author', 'collections.author')\n      .where('collections.collection', 'like', s)\n      .andWhere('texts.state', true);\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    return exp.from('texts')\n      .where('texts.state', true)\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author)\n      .andWhere('texts.state', true);\n    withinDat(exp, dat);\n    return exp.orderBy('title');\n  }\n\n  // Like getItemsWith, except some extra work is done to return titles\n  // along with a comma-separated list of files:downloaded for each title.\n  getTitlesWith(opts, dat) {\n    const exp = this.db\n      .select('texts.dat',\n        'texts.author',\n        'texts.title',\n        'texts.title_hash',\n        'texts.author_sort',\n      this.db.raw('GROUP_CONCAT(\"texts.file\" || \":\" || \"texts.downloaded\") as \"files\"'))\n      .from('texts')\n      .where('texts.state', true);\n    if (opts.author) {\n      exp.AndWhere('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.andWhere('texts.title', opts.title);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat);\n    return exp\n      .groupBy('texts.author', 'texts.title')\n      .orderBy('texts.author_sort', 'texts.title');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('texts.file', opts.file);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat || opts.dat);\n    return exp\n      .andWhere('texts.state', true)\n      .orderBy('texts.dat', 'texts.author', 'texts.title');\n  }\n\n  // Gets a list of collections in the catalog\n  getCollections(startingWith, dat) {\n    const exp = this.db.select('collection').from('collections')\n      .count('* as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('collection', 'like', s);\n    }\n    return exp\n      .andWhere('texts.state', true)\n      .groupBy('collection')\n      .orderBy('collection');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .andWhere('title', title)\n      .andWhere('texts.state', true);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => readOPF(path.join(fp.dir, author, title, mfn)));\n  }\n\n  // Initializes tables\n  init() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('datsX')\n      .dropTableIfExists('textsX')\n      .dropTableIfExists('more_authorsX');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      table.integer('version'); // this will need to be updated whenever files are imported\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.increments('text_id');\n      table.string('dat');\n      table.integer('version');\n      table.boolean('state'); // is valid\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('collections', (table) => {\n      table.string('dat');\n      table.string('author');\n      table.string('title');\n      table.string('collection');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n}\n\nexport default Database;\n"]}