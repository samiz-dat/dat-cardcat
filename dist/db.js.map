{"version":3,"sources":["../src/db.js"],"names":["withinDat","query","dat","where","Array","isArray","whereIn","Database","constructor","filename","getDats","db","select","getDat","key","client","connection","useNullAsDefault","addDat","name","dir","insert","into","removeDat","datKey","del","updateDat","update","clearTexts","pathToDat","from","first","addText","opts","title_hash","file_hash","author","author_sort","title","file","downloaded","setDownloaded","search","s","exp","raw","orWhere","groupBy","orderBy","getAuthors","startingWith","countDistinct","getAuthorLetters","column","distinct","getTitlesForAuthor","getTitlesWith","getItemsWith","getFiles","getDatsWith","getOpf","mfn","then","row","fp","join","init","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","table","string","boolean","isReady","catch","e","console","error"],"mappings":"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","file":"db.js","sourcesContent":["import path from 'path';\nimport db from 'knex';\nimport { readOPF } from 'open-packaging-format';\n\n// Narrows query to within a dat/ list of dats\nfunction withinDat(query, dat) {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where('dat', dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn('dat', dat);\n    }\n  }\n  return query;\n}\n\nexport class Database {\n  // Constructor\n  constructor(filename) {\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename,\n      },\n      useNullAsDefault: true,\n    });\n  }\n\n  // Add a dat to the database\n  addDat(dat, name, dir) {\n    return this.db.insert({ dat, name, dir }).into('dats');\n  }\n\n  // Remove a dat from the database\n  removeDat(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Update a dat's name and directory\n  updateDat(datKey, name, dir) {\n    return this.db('dats')\n      .where('dat', datKey)\n      .update({\n        name,\n        dir,\n      });\n  }\n\n  // Remove all entries/ texts for a dat\n  clearTexts(datKey) {\n    if (datKey) {\n      return this.db('texts').where('dat', datKey).del();\n    }\n    return this.db('texts').del();\n  }\n\n  // Returns the path to a dat as found in db.\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Insert a text into the texts table\n  addText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      title_hash: opts.title_hash || '',\n      file_hash: opts.file_hash || '',\n      author: opts.author,\n      author_sort: opts.author_sort,\n      title: opts.title,\n      file: opts.file,\n      downloaded: opts.downloaded || 0,\n    }).into('texts');\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Searches for titles with files bundled up in a comma separated column\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts')\n      .where(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      })\n      .groupBy('author', 'title');\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, dat) {\n    const exp = this.db.select('author').from('texts')\n      .countDistinct('title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('author')\n      .orderBy('author_sort');\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    return exp.from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author);\n    withinDat(exp, dat);\n    return exp.orderBy('title');\n  }\n\n  // Like getItemsWith, except some extra work is done to return titles\n  // along with a comma-separated list of files:downloaded for each title.\n  getTitlesWith(opts, dat) {\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts');\n    if (opts.author) {\n      exp.where('author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('title', opts.title);\n    }\n    withinDat(exp, dat);\n    return exp\n      .groupBy('author', 'title')\n      .orderBy('author_sort', 'title');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('file', opts.file);\n    }\n    withinDat(exp, dat);\n    return exp.orderBy('dat', 'author', 'title');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => readOPF(path.join(fp.dir, author, title, mfn)));\n  }\n\n  // Initializes tables\n  init() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('datsX')\n      .dropTableIfExists('textsX')\n      .dropTableIfExists('more_authorsX');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n}\n\nexport default Database;\n"]}