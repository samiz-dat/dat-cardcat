{"version":3,"sources":["../src/db.js"],"names":["withinDat","query","dat","table","where","Array","isArray","whereIn","Database","constructor","filename","getDats","db","select","getDat","key","client","connection","useNullAsDefault","transact","queries","console","log","length","resolve","doTransaction","q","raw","then","each","catch","e","addDat","name","dir","version","insert","into","removeDat","datKey","del","updateDat","update","clearTexts","clearCollections","pathToDat","from","first","addText","opts","p","title_hash","file_hash","author","author_sort","title","file","downloaded","transacting","transactionStatements","push","toString","checkAndAddText","transaction","trx","whereNotExists","commit","rollback","err","error","addCollectedText","collection","setDownloaded","search","s","exp","orWhere","groupBy","orderBy","getAuthors","startingWith","countDistinct","getCollectionAuthors","innerJoin","getAuthorLetters","column","distinct","getTitlesForAuthor","getTitlesWith","on","getItemsWith","getCollections","count","getFiles","getDatsWith","getOpf","mfn","row","fp","join","init","tablesDropped","schema","dropTableIfExists","createTableIfNotExists","string","integer","boolean","isReady"],"mappings":"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","file":"db.js","sourcesContent":["import path from 'path';\nimport db from 'knex';\nimport Promise from 'bluebird';\nimport { readOPF } from 'open-packaging-format';\n\n// Narrows query to within a dat/ list of dats\nfunction withinDat(query, dat, table = 'texts') {\n  if (dat) {\n    if (typeof dat === 'string') {\n      query.where(`${table}.dat`, dat);\n    } else if (Array.isArray(dat)) {\n      query.whereIn(`${table}.dat`, dat);\n    }\n  }\n  return query;\n}\n\nexport class Database {\n  // Constructor\n  constructor(filename) {\n    this.db = db({\n      client: 'sqlite3',\n      connection: {\n        filename,\n      },\n      useNullAsDefault: true,\n    });\n  }\n\n  transact(queries) {\n    console.log('transact(queries)', queries.length);\n    if (queries.length === 0) {\n      return Promise.resolve(false);\n    }\n    return this.doTransaction(queries);\n  }\n\n  async doTransaction(queries) {\n    if (queries.length === 0) {\n      return Promise.resolve(false);\n    }\n    const q = await this.db.raw('BEGIN TRANSACTION')\n      .then(() => {\n        Promise.each(queries, query => this.db.raw(`${query}`));\n      })\n      .then(() => this.db.raw('COMMIT'))\n      .catch(e => console.log(e));\n    return q;\n  }\n\n  // Add a dat to the database\n  addDat(dat, name, dir, version) {\n    return this.db.insert({ dat, name, dir, version }).into('dats');\n  }\n\n  // Remove a dat from the database\n  removeDat(datKey) {\n    return this.db('dats').where('dat', datKey).del();\n  }\n\n  // Update a dat's name and directory\n  updateDat(datKey, name, dir) {\n    return this.db('dats')\n      .where('dat', datKey)\n      .update({\n        name,\n        dir,\n      });\n  }\n\n  // Remove all entries/ texts for a dat\n  clearTexts(datKey) {\n    if (datKey) {\n      return this.db('texts').where('dat', datKey).del();\n    }\n    return this.db('texts').del();\n  }\n\n  // Remove all collection entries for a dat\n  clearCollections(datKey) {\n    if (datKey) {\n      return this.db('collections').where('dat', datKey).del();\n    }\n    return this.db('collections').del();\n  }\n\n  // Returns the path to a dat as found in db.\n  pathToDat(datKey) {\n    return this.db.select('dir').from('dats').where('dat', datKey).first();\n  }\n\n  // Insert a text into the texts table\n  addText(opts) {\n    const p = this.db.insert({\n      dat: opts.dat,\n      title_hash: opts.title_hash || '',\n      file_hash: opts.file_hash || '',\n      author: opts.author,\n      author_sort: opts.author_sort,\n      title: opts.title,\n      file: opts.file,\n      downloaded: opts.downloaded || 0,\n    }).into('texts');\n    if (this.transacting) {\n      this.transactionStatements.push(p.toString());\n      return Promise.resolve(true);\n    }\n    return p;\n  }\n\n  // Only adds the text if it's not yet in the database\n  checkAndAddText(opts) {\n    return this.db.transaction((trx) => {\n      this.db('texts').transacting(trx).insert({\n        dat: opts.dat,\n        title_hash: opts.title_hash || '',\n        file_hash: opts.file_hash || '',\n        author: opts.author,\n        author_sort: opts.author_sort,\n        title: opts.title,\n        file: opts.file,\n        downloaded: opts.downloaded || 0,\n      }).whereNotExists(this.db('texts').transacting(trx)\n        .where('dat', opts.dat)\n        .where('author', opts.author)\n        .where('title', opts.title)\n        .where('file', opts.file))\n      .then(trx.commit)\n      .catch(trx.rollback);\n    })\n    .then(() => {\n      // console.log('Transaction complete.');\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n    /*\n    return this.addText(opts)\n      .whereNotExists(this.db('texts')\n        .where('dat', opts.dat)\n        .where('author', opts.author)\n        .where('title', opts.title)\n        .where('file', opts.file));\n    */\n  }\n\n  // Inserts a row for a collected text\n  addCollectedText(opts) {\n    return this.db.insert({\n      dat: opts.dat,\n      author: opts.author,\n      title: opts.title,\n      collection: opts.collection,\n    }).into('collections');\n  }\n\n  // Sets download status of a row\n  setDownloaded(dat, author, title, file, downloaded = true) {\n    return this.db('texts')\n      .where('dat', dat)\n      .where('author', author)\n      .where('title', title)\n      .where('file', file)\n      .update({\n        downloaded,\n      });\n  }\n\n  // Searches for titles with files bundled up in a comma separated column\n  search(query, dat) {\n    const s = `%${query}%`;\n    const exp = this.db\n      .select('dat',\n        'author',\n        'title',\n        'title_hash',\n        'author_sort',\n      this.db.raw('GROUP_CONCAT(\"file\" || \":\" || \"downloaded\") as \"files\"'))\n      .from('texts')\n      .where(function () { // a bit inelegant but groups where statements\n        this.where('title', 'like', s)\n          .orWhere('author', 'like', s);\n      })\n      .groupBy('author', 'title');\n    withinDat(exp, dat);\n    return exp.orderBy('author_sort', 'title');\n  }\n\n  // Gets a count of authors in the catalog\n  getAuthors(startingWith, dat) {\n    const exp = this.db.select('texts.author').from('texts')\n      .countDistinct('texts.title as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('texts.author_sort', 'like', s);\n    }\n    return exp\n      .groupBy('texts.author')\n      .orderBy('texts.author_sort');\n  }\n\n  // Gets authors within a collection\n  getCollectionAuthors(collection, startingWith, dat) {\n    const q = this.getAuthors(startingWith, dat);\n    q.countDistinct('collections.title as count'); // count inside the collection instead\n    const s = `${collection}%`;\n    return q.innerJoin('collections', 'texts.author', 'collections.author')\n      .where('collections.collection', 'like', s);\n  }\n\n  // Gets a list of letters of authors, for generating a directory\n  getAuthorLetters(dat) {\n    const exp = this.db.column(this.db.raw('lower(substr(author_sort,1,1)) as letter'))\n      .select();\n    withinDat(exp, dat);\n    return exp.from('texts')\n      .distinct('letter')\n      .orderBy('letter');\n  }\n\n  getTitlesForAuthor(author, dat) {\n    const exp = this.db('texts')\n      .distinct('dat', 'title')\n      .where('author', author);\n    withinDat(exp, dat);\n    return exp.orderBy('title');\n  }\n\n  // Like getItemsWith, except some extra work is done to return titles\n  // along with a comma-separated list of files:downloaded for each title.\n  getTitlesWith(opts, dat) {\n    const exp = this.db\n      .select('texts.dat',\n        'texts.author',\n        'texts.title',\n        'texts.title_hash',\n        'texts.author_sort',\n      this.db.raw('GROUP_CONCAT(\"texts.file\" || \":\" || \"texts.downloaded\") as \"files\"'))\n      .from('texts');\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat);\n    return exp\n      .groupBy('texts.author', 'texts.title')\n      .orderBy('texts.author_sort', 'texts.title');\n  }\n\n  // Gets entire entries for catalog items matching author/title/file.\n  // Can specify a dat or a list of dats to get within.\n  getItemsWith(opts, dat, distinct) {\n    const exp = this.db('texts');\n    if (distinct) {\n      exp.distinct(distinct);\n    }\n    if (opts.author) {\n      exp.where('texts.author', opts.author);\n    }\n    if (opts.title) {\n      exp.where('texts.title', opts.title);\n    }\n    if (opts.file) {\n      exp.where('texts.file', opts.file);\n    }\n    if (opts.collection) {\n      const s = `${opts.collection}%`;\n      exp.innerJoin('collections', function() {\n        this\n          .on('texts.dat', 'collections.dat')\n          .on('texts.author', 'collections.author')\n          .on('texts.title', 'collections.title');\n      })\n      .where('collections.collection', 'like', s);\n    }\n    withinDat(exp, dat || opts.dat);\n    return exp.orderBy('texts.dat', 'texts.author', 'texts.title');\n  }\n\n  // Gets a list of collections in the catalog\n  getCollections(startingWith, dat) {\n    const exp = this.db.select('collection').from('collections')\n      .count('* as count');\n    withinDat(exp, dat);\n    if (startingWith) {\n      const s = `${startingWith}%`;\n      exp.where('collection', 'like', s);\n    }\n    return exp\n      .groupBy('collection')\n      .orderBy('collection');\n  }\n\n  // Optionally only include files from a particular dat.\n  // Optionally specify a filename to find.\n  getFiles(author, title, dat, file) {\n    const exp = this.db('texts')\n      .where('author', author)\n      .where('title', title);\n    withinDat(exp, dat);\n    if (file) {\n      exp.where('file', file);\n    }\n    return exp.orderBy('dat', 'file');\n  }\n\n  getDats = () => this.db('dats').select();\n  getDat = key => this.db('dats').select().where('dat', key);\n\n  // Gets dats containing items described in opts (author/title/file)\n  // Optionally provide one or more dats to look within.\n  getDatsWith(opts, dat) {\n    return this.getItemsWith(opts, dat, 'dat');\n  }\n\n  // Returns opf metadata object for an item, optionally preferring a specific library.\n  getOpf(author, title, dat = false) {\n    const mfn = 'metadata.opf'; // metadata file name\n    return this.getFiles(author, title, dat, mfn).first()\n      .then(row => this.pathToDat(row.dat))\n      .then(fp => readOPF(path.join(fp.dir, author, title, mfn)));\n  }\n\n  // Initializes tables\n  init() {\n    // we should probably setup a simple migration script\n    // but for now lets just drop tables before remaking tables.\n    const tablesDropped = this.db.schema.dropTableIfExists('datsX')\n      .dropTableIfExists('textsX')\n      .dropTableIfExists('more_authorsX');\n    return tablesDropped.createTableIfNotExists('dats', (table) => {\n      table.string('dat');\n      table.string('name');\n      table.string('dir');\n      table.integer('version');\n      // table.unique('dat');\n    })\n    .createTableIfNotExists('texts', (table) => {\n      table.string('dat');\n      table.string('title_hash');\n      table.string('file_hash');\n      table.string('author');\n      table.string('author_sort');\n      table.string('title');\n      table.string('file');\n      table.boolean('downloaded');\n    })\n    .createTableIfNotExists('collections', (table) => {\n      table.string('dat');\n      table.string('author');\n      table.string('title');\n      table.string('collection');\n    })\n    .createTableIfNotExists('more_authors', (table) => {\n      table.string('title_hash');\n      table.string('author');\n      // table.unique('title_hash');\n    })\n    .then(() => { this.isReady = true; })\n    .catch(e => console.error(e));\n  }\n}\n\nexport default Database;\n"]}